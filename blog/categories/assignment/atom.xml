<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: assignment | Shailen Tuli's tech blog]]></title>
  <link href="http://shailen.github.com/blog/categories/assignment/atom.xml" rel="self"/>
  <link href="http://shailen.github.com/"/>
  <updated>2012-11-17T23:20:31-08:00</updated>
  <id>http://shailen.github.com/</id>
  <author>
    <name><![CDATA[Shailen Tuli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[using boolean expressions for assignment in Dart]]></title>
    <link href="http://shailen.github.com/blog/2012/11/17/using-boolean-expressions-for-assignment-in-dart/"/>
    <updated>2012-11-17T21:52:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/17/using-boolean-expressions-for-assignment-in-dart</id>
    <content type="html"><![CDATA[<p>I often do this in Javascript:</p>

<pre><code>var Point = function(options) {
  options = options || {};
  this.x = options['x'] || 0;
  this.y = options['y'] || 0;
}
</code></pre>

<p>in Ruby, I do this:</p>

<pre><code>age ||= 16; // if age is `nil` or `false`, assign it a value of 16
</code></pre>

<p>or, this:</p>

<pre><code>a, b, c = 1, 2, 3
d = a &amp;&amp; b &amp;&amp; c
// d will equal 3
</code></pre>

<p>In these cases, the boolean expressions return the value of the last evaluation. So, how should this be done
in Dart? Consider this code:</p>

<pre><code>var x;
var y = x || 10;
</code></pre>

<p>In checked mode, this generates an exception (more on that in a moment). What do you think happens in unchecked mode?  What
is the value of <code>y</code>?</p>

<p>At first glance, the code looks reasonable, but the answer is <em>really</em> problematic. Based on other languages I have used, I would expect <code>y</code> to equal <code>10</code>.
In Dart, this does not happen. <code>y</code> actually gets assigned a value of <code>false</code>. Since 10 is not explicitly <code>true</code>, it evaluates to
<code>false</code>. This is exactly what Dart is supposed to do. See my <a href="http://shailen.github.com/blog/2012/11/16/booleans-in-dart/">post</a> from yesterday it this isn't clear.</p>

<p>Now, in checked mode (you are using checked mode, right?), <code>y</code> doesn't get a value at all because we get an error:</p>

<pre><code>Unhandled exception:
type 'Null' is not a subtype of type 'bool' of 'boolean expression'.
</code></pre>

<p>This is Dart's way of telling us that it is not going to do implicit boolean conversion for us when using <code>||</code> and it expects to see a boolean where it
now sees a <code>null</code> (<code>x</code> is null).  Changing the code to:</p>

<pre><code>var y = 5 || 10;
</code></pre>

<p>we get a slightly different error message:</p>

<pre><code>Unhandled exception:
type 'int' is not a subtype of type 'bool' of 'boolean expression'.
</code></pre>

<p>No good. Dart wants booleans around the <code>||</code>. Something like this works fine:</p>

<pre><code>int x = 10;
bool y = x % 3 == 1 || x % 5 == 2;
// y is true
</code></pre>

<p>So, how do we correctly handle assignment based on boolean evaluation? We do an explicit test and not rely on <code>||</code> or <code>&amp;&amp;</code> to implicitly
handle this for:</p>

<pre><code>int x; // x is null
int y = x == null ? 0 : x;
// y now has a value of 0
</code></pre>

<p>The lessons of all this? <strong>Use checked mode</strong>. Don't rely on Dart's boolean expressions to magically return boolean values; if such values
are needed, obtain them directly yourself. Its much clearer to be explicit.</p>
]]></content>
  </entry>
  
</feed>
