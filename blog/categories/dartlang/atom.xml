<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dartlang | Shailen Tuli's blog]]></title>
  <link href="http://shailen.github.com/blog/categories/dartlang/atom.xml" rel="self"/>
  <link href="http://shailen.github.com/"/>
  <updated>2012-11-26T12:05:21-08:00</updated>
  <id>http://shailen.github.com/</id>
  <author>
    <name><![CDATA[Shailen Tuli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[using setUp() in your Dart tests]]></title>
    <link href="http://shailen.github.com/blog/2012/11/21/using-setup-in-your-dart-tests/"/>
    <updated>2012-11-21T22:47:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/21/using-setup-in-your-dart-tests</id>
    <content type="html"><![CDATA[<p>Take this minimal <code>Point</code> class:</p>

<pre><code>class Point {
  num x;
  num y;
  Point(this.x, this.y);

  num distanceTo(Point other) {
    ...
  }
}
</code></pre>

<p>As you write tests for <code>Point</code>, you will probably want to set up one or more <code>point</code> objects that you can access in each
test. Something like:</p>

<pre><code>void main() {
  group("Point", (){
    setUp((){
      Point p1 = new Point(3, 4);
      Point p2 = new Point(3, 5);
    });
    test("distanceTo()", (){
      expect(p1.distanceTo(p2), equals(...));
    });
  });
}
</code></pre>

<p>Do this and the Editor starts complaining that it cannot make sense of <code>p1</code> or <code>p2</code>. Why?  Remember, <code>setUp()</code> simply calls the function passed
to it before each <code>test()</code> and our code defining <code>p1</code> and <code>p2</code> will therefore run every time. But (and this seems like a Captain Obvious mement) because <code>p1</code> and <code>p2</code>
are local to function called by <code>setUp()</code>, they cannot be accessed from outside that function.  But it takes only very small changes to take care of the access problem:</p>

<pre><code>void main() {
  group("Point", (){
    Point p1;
    Point p2;
    setUp((){
      p1 = new Point(3, 4);
      p2 = new Point(3, 5);
    });
    test("distanceTo()", (){
      expect(p1.distanceTo(p2), equals(34));
    });
  });
});
</code></pre>

<p>Now, the function called by <code>setUp()</code> assigns a value to the already existing <code>p1</code> and <code>p2</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grouping dart tests]]></title>
    <link href="http://shailen.github.com/blog/2012/11/20/grouping-dart-tests/"/>
    <updated>2012-11-20T16:02:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/20/grouping-dart-tests</id>
    <content type="html"><![CDATA[<p>Yesterday, we create a simple Dart package with a <code>range</code> library and wrote a couple of tests. Let's pick up
where we left off and add more tests.</p>

<p>We should test that the list returned by <code>range()</code> does not include <code>stop</code> and that an ArgumentError is raised when start >= stop.
Modify your <code>range_test.dart</code> file so that it contains the new tests:</p>

<pre><code>import 'package:unittest/unittest.dart';
import 'package:range/range.dart';

void main() {
  test("range() produces a list that starts at `start`", () {
    expect(range(0, 4)[0], equals(0));
  });

  test ("range() produces a list that stops before `stop`", () {
    expect(range(0, 4).last, equals(3));
  });

  test("range() throws an exception when start &gt; stop", () {
    expect(() =&gt; range(5, 2), throwsA(new isInstanceOf&lt;ArgumentError&gt;()));
  });

  test("range() throws an exception when start == stop", () {
    expect(() =&gt; range(5, 5), throwsA(new isInstanceOf&lt;ArgumentError&gt;()));
  });
}
</code></pre>

<p>Run the tests again. They should all pass. We have doubled our test coverage!</p>

<p>Now, what we have here works fine, but we can improve things a bit. Notice the repetition in the string arguments we pass to
each <code>test()</code> ("range() produces ...", "range() throws ...", etc.)? We should clean that up. Also, we have 4 tests that fall into
2 natural groups: the first two call <code>range()</code> with valid arguments and the last two with invalid arguments. We should arrange
our tests more clearly to reflect this grouping. Finally, there are no tests for the optional <code>step</code> argument. We should add those.
Rewriting our tests, we get:</p>

<pre><code>import 'package:unittest/unittest.dart';
import 'package:range/range.dart';

void main() {
  group("range()", () {
    group("produces a list that", () {
      test("starts at `start`", () {
        expect(range(0, 4)[0], equals(0));
      });

      test ("stops before `stop`", () {
        expect(range(0, 4).last, equals(3));
      });

      test("has consecutive values if no `step` is given", () {
        expect(range(1, 6), equals([1, 2, 3, 4, 5]));
      });

      test("has non-consecutive values with `step` &gt; 1", () {
        expect(range(1, 6, 2), equals([1, 3, 5]));
      });
    });

    group("throws an exception when", () {
      test("start &gt; stop", () {
        expect(() =&gt; range(5, 2), throwsA(new isInstanceOf&lt;ArgumentError&gt;()));
      });

      test("start == stop", () {
        expect(() =&gt; range(5, 5), throwsA(new isInstanceOf&lt;ArgumentError&gt;()));
      });
    });
  });
}
</code></pre>

<p>Much better. We use nested <code>group()</code>s to organize our tests; we pass descriptive string args to each <code>group()</code> to make our intent clear; we get rid
of a lot of repetition.</p>

<p>Let's run our tests again:</p>

<pre><code>unittest-suite-wait-for-done
PASS: range() produces a list that starts at `start`
PASS: range() produces a list that stops before `stop`
PASS: range() produces a list that has consecutive values if no `step` is given
PASS: range() produces a list that has non-consecutive values with `step` &gt; 1
PASS: range() throws an exception when start &gt; stop
PASS: range() throws an exception when start == stop

All 6 tests passed.
unittest-suite-success
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[writing unit tests for pub packages]]></title>
    <link href="http://shailen.github.com/blog/2012/11/19/writing-unit-tests-for-pub-packages/"/>
    <updated>2012-11-19T11:18:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/19/writing-unit-tests-for-pub-packages</id>
    <content type="html"><![CDATA[<p>In this post I'm going to show you how to create a really simple Dart package. Because we would never want to
write a package without testing the code in it, I will also introduce you to Dart's quite excellent <code>unittest</code> framework.</p>

<p><a href="http://pub.dartlang.org/">Pub</a> is Dart's package mananger. After working through this post, you will be able to bundle your Dart libraries
and share them with others on Pub.</p>

<p>For the purposes of this post, our package will be very basic and consist of a singe <code>range()</code> function modeled roughly on the Python
builtin function with the same name.</p>

<p><code>range()</code> will have the following signature:</p>

<pre><code>List&lt;num&gt; range(num start, num stop, [num step = 1]);
</code></pre>

<p>It will return a list of ints between <code>start</code> and <code>stop</code> separated by <code>step</code> steps. Here is some sample usage:</p>

<pre><code>range(0, 4);    // [0, 1, 2, 3]
range(1, 6, 2); // [1, 3, 5]
</code></pre>

<p>Let's get started.</p>

<h2>Create a simple package</h2>

<p>Open up Dart Editor and create a <code>New application</code> called <code>range</code>. For this example, we will not be creating a web project, so uncheck <code>Generate
content for a basic web app</code> when you create the application. But do make sure that <code>Add Pub support</code> is checked.</p>

<p>Delete the automatically created <code>bin</code> directory. We won't be needing it.</p>

<p>Create a top level <code>lib</code> directory. Inside <code>lib</code>, create a <code>range.dart</code> file: the code for <code>range()</code> will go in here.</p>

<p>There are other directories and files that you should create - a README, a LICENSE, a <code>doc/</code> folder for documentation,
an <code>example/</code> folder with examples showing usage of your package, etc. - but our focus here is on how to write unittests, so we'll skip over those
files and directories for now. To know what else you should be doing to make this a <em>respectable</em> package, see this excellent writeup
on <a href="http://pub.dartlang.org/doc/package-layout.html">package layout conventions</a> on the <a href="http://pub.dartlang.org/doc/package-layout.html">pub site</a>.</p>

<h2>Add unittest package to your library</h2>

<p>With the basic files created for our package, let's open up <code>pubspec.yaml</code> and add some metadata for our pub
package (read more about <a href="http://pub.dartlang.org/doc/pubspec.html">Pubspec format</a>). Every package <strong>must</strong> contain a <code>pubspec.yaml</code>; in fact, it
is this file that makes it a package.</p>

<p>Add a simple description for the package and specify its only dependency, the unittest package. Your <code>pubspec.yaml</code> should look like this:</p>

<pre><code>name:  range
description:  An approximate implementation of the range() function in Python.

dependencies:
  unittest: { sdk: unittest }
</code></pre>

<p>Run <code>pub install</code> (you can find it under <code>Tools</code> in the Editor). This will create a <code>pubspec.lock</code> file and a bunch of
symlinks that are all necessary for the plumbing to work correctly; fortunately, Dart handles all these details for us.</p>

<h2>Write some code</h2>

<p>Let's create a bare-bones implementation for <code>range()</code>.  Add the following code to <code>lib/range.dart</code>:</p>

<pre><code>library range; 

List&lt;int&gt; range(int start, int stop, [int step=1]) {
  if (start &gt;= stop) {
    throw new ArgumentError("start must be less than stop");
  }

  List&lt;int&gt; list = [];

  for (var i = start; i &lt; stop; i+= step) {
    list.add(i);
  }

  return list;
}
</code></pre>

<h2>Write some tests</h2>

<p>Create a top level <code>test</code> directory. Inside <code>test</code>, create a <code>range_test.dart</code> file: your tests will go in here.
But before we can write our tests, <code>test/range_test.dart</code> needs access to the <code>unittest</code> package and the <code>range</code> library. At the top of
<code>range_test.dart</code>, add these <code>import</code> statements:</p>

<pre><code>import 'package:unittest/unittest.dart';
import 'package:range/range.dart';
</code></pre>

<p>Now add a couple of tests (we'll need many more to really test <code>range()</code>, but these will do for now). Your <code>range_test.dart</code> should look like this:</p>

<pre><code>import 'package:unittest/unittest.dart';
import 'package:range/range.dart';

void main() {
  test("range() produces a list that starts at `start`", () {
    expect(range(0, 4)[0], equals(0));
  });

  test("range() throws an exception when start &gt; stop", () {
    expect(() =&gt; range(5, 2), throwsA(new isInstanceOf&lt;ArgumentError&gt;()));
  });      
}
</code></pre>

<p>An individual test goes inside <code>test()</code>. <code>expect()</code> evaluates the equality between the expected and actual values. A string
argument to <code>test()</code> describes the purpose of the test.</p>

<p>Run the tests (press the green arrow in the Editor; or, press <code>CMD-R</code> if you are using a Mac; or, type <code>dart test/range_test.dart</code> on the command line).
Watch the output produced by the editor:</p>

<pre><code>unittest-suite-wait-for-done
PASS: range() produces a list that starts at `start`
PASS: range() throws an exception when start &gt; stop

All 2 tests passed.
unittest-suite-success
</code></pre>

<h2>Summary</h2>

<p>So, we managed to create a minimal Dart package, made it (barely) good enough to put on <code>pub</code>, and wrote a few tests.  This is a good start, of course,
but we have only scratched the surface of how we should test our packages. For a very thorough explanation of how the <code>unittest</code> framework works
in Dart, I would highly recommend a careful reading of <a href="http://www.dartlang.org/articles/dart-unit-tests/">Unit Testing with Dart</a> by Google engineer
Graham Wheeler. He goes into considerable details about writing tests, defining <code>setUp()</code> and <code>tearDown()</code>, running asynchronous tests, using
and creating matchers, and configuring your test environment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using boolean expressions for assignment in Dart]]></title>
    <link href="http://shailen.github.com/blog/2012/11/17/using-boolean-expressions-for-assignment-in-dart/"/>
    <updated>2012-11-17T21:52:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/17/using-boolean-expressions-for-assignment-in-dart</id>
    <content type="html"><![CDATA[<p>I often use boolean evaluation in Javascript for assignment:</p>

<pre><code>var Point = function(options) {
  options = options || {};
  this.x = options['x'] || 0;
  this.y = options['y'] || 0;
}
</code></pre>

<p>And in Ruby, it is idiomatic to do something like this:</p>

<pre><code>age ||= 16; // if age is `nil` or `false`, assign it a value of 16
</code></pre>

<p>or, this:</p>

<pre><code>a, b, c = 1, 2, 3
d = a &amp;&amp; b &amp;&amp; c
// d gets the value of c, 3
</code></pre>

<p>In each case, the boolean expressions return the value of the last evaluation. Can I do something similar in Dart?
Is this code legal?</p>

<pre><code>var x; // x is null
var y = x || 10;
</code></pre>

<p>In checked mode, no; in unchecked mode, this works, but the result may surprise you.</p>

<p>Based on other languages I have used, I would expect <code>y</code> to equal <code>10</code>.
In Dart, this does not happen and <code>y</code> gets assigned a value of <code>false</code>. Why? Since <code>10</code> is not explicitly <code>true</code>, it evaluates to
<code>false</code>. All things that are not explicitly <code>true</code> in Dart, are false (see my <a href="http://shailen.github.com/blog/2012/11/16/booleans-in-dart/">post</a>
from yesterday if this isn't clear).</p>

<p>Now, in checked mode (you are using checked mode, right?), <code>y</code> doesn't get a value at all because we get an error:</p>

<pre><code>Unhandled exception:
type 'Null' is not a subtype of type 'bool' of 'boolean expression'.
</code></pre>

<p>This is Dart's way of telling us that it is not going to do implicit boolean conversion for us when using <code>||</code> and it expects to see a boolean where it
now sees a <code>null</code> (<code>x</code> is null).  Changing the code to:</p>

<pre><code>var y = 5 || 10;
</code></pre>

<p>we get a slightly different error message:</p>

<pre><code>Unhandled exception:
type 'int' is not a subtype of type 'bool' of 'boolean expression'.
</code></pre>

<p>No good. Dart wants booleans around the <code>||</code>. This works fine, but it isn't what we are looking for:</p>

<pre><code>int x = 10;
bool y = x % 3 == 1 || x % 5 == 2;
// y is true
</code></pre>

<p>So, is there a correct way to handle assignment based on boolean evaluation? Yes. Don't rely on <code>||</code> or <code>&amp;&amp;</code> to implicitly
handle this for you; instead, explicitly check for truthyness yourself:</p>

<pre><code>int y = x == null ? 0 : x;
</code></pre>

<p>If <code>x</code> is null, <code>y</code> will be <code>0</code>; else, it will have the value of <code>x</code>. Quite clear and readable.</p>

<p>Boolean based assignment is common in JavaScript because there we don't have as rich an understanding
of keyword arguments and default values as Dart has. In Dart, we can do this:</p>

<pre><code>myFunction({x: 0, y: 0}) {
  ...
}
</code></pre>

<p>If you need to check whether a parameter was passed a value or not, you can easily do so:</p>

<pre><code>myFunction([x=0]) {
  if (?x) {
    ...
  }
}
</code></pre>

<p>The lessons of all this? <strong>Use checked mode</strong>. Don't rely on Dart's boolean expressions to magically return boolean values; if such values
are needed, obtain them directly yourself. Be explicit. Use default arguemnts in functions and methods. Use <code>?</code> to check if a parameter was passed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[booleans in dart]]></title>
    <link href="http://shailen.github.com/blog/2012/11/16/booleans-in-dart/"/>
    <updated>2012-11-16T18:32:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/16/booleans-in-dart</id>
    <content type="html"><![CDATA[<p>We've all written code that looks something like this:</p>

<pre><code>if (x) {
  // do something
} else {
  // do something else
}
</code></pre>

<p>In Javascript, the <code>if (x)</code> would evaluate to false if <code>x</code> was <code>false</code>, <code>null</code>, <code>undefined</code>, the number <code>0</code> (or <code>0.0</code>),
an <code>''</code> or <code>NaN</code> (these are all falsey in Javascript); otherwise it would evaluate to true.</p>

<p>If this code were rewritten in Python, the <code>if (x)</code> would evaluate to false if <code>x</code> was <code>None</code>, <code>false</code>, zero (<code>0</code>,
<code>0.0</code>, <code>0L</code>, etc.), an empty string (<code>''</code>), list (<code>[]</code>), tuple (<code>()</code>) or dict(<code>{}</code>);
otherwise it would evaluate to true.</p>

<p>So, what are the truthy and falsey lists for Dart? To answer that, let's look at what the
language spec says about booleans:</p>

<pre><code>Boolean conversion maps any object o into a boolean. Boolean conversion is defined  by the function
  (bool v){
    assert(v != null);
    return identical(v, true);
  }(o)
</code></pre>

<p>In other words, anything that is not explicitly <code>true</code>, is <code>false</code> in Dart. So, in our example, if <code>if (x)</code> would evaluate to
<code>true</code> if and only if <code>x</code> equalled the the boolean literal <code>true</code> (or an expression that evaluated to <code>true</code> (<code>3 % 2 == 1</code>, say)),;
otherwise it would evaluate to false.</p>

<p>This is very simple. There are no truthy/falsey lists to memorize; it is all very clear, quite correct and ....</p>

<p>likely to get you quickly into trouble. Wait, what?</p>

<p>This is legal Dart code, right? Well, that depends if you are in checked mode or not.  In unchecked mode, the code works exactly
as described above. However, in <em>checked mode</em>, any <code>if (x)</code> type constructs will generate an exception unless x is a boolean. Let's
look at that function from the language spec again:</p>

<pre><code>(bool v) {

}
</code></pre>

<p><strong>In checked mode, v <em>must be a bool</em>. If it isn't, the Dart editor will complain and throw an exception. We will never
get to the stage of figuring out whether our <code>if (x)</code> evaluates to true or false.</strong></p>

<p>Going back to other languages for a moment: I always felt that Javascript and Python had too many falsey values. I liked
that in Ruby, only <code>false</code> and <code>nil</code> evaluated to false; everything else was true. So, instead of writing <code>if myList ...</code>, you
would write <code>if myList.empty? ..</code> in Ruby, making your intent quite clear.
Dart actually goes beyond
Ruby in this regard and <em>really</em> simplifies things:  <code>false</code> (and boolean expressions that return <code>false</code>) are false;
<code>true</code> (and boolean expressions that return <code>true</code>) are true. <em><strong>Everything else is neither false nor true</strong></em>.</p>

<p>So, as a programmer, how should you handle the reality that the Dart's boolean semantics change based on whether you
are in checked or unchecked mode?  My recommendation: always code in checked mode and be quite explicit about boolean
expressions.</p>

<p>Avoid code like this (you will get an exception in checked mode):</p>

<pre><code>String s = '';
if (s) {...}
</code></pre>

<p>This can be rewritten more clearly:</p>

<pre><code>if (s.isEmpty) {...}
</code></pre>

<p>The following:</p>

<pre><code>List myList = [1, 2, 3];
if(myList.indexOf(1)) {...}
</code></pre>

<p>should become:</p>

<pre><code>if (myList.indexOf(1) != 0) {...}
</code></pre>

<p>and this:</p>

<pre><code>int num;
if (num) {...}
</code></pre>

<p>is better written as:</p>

<pre><code>if (num == null) {...}
</code></pre>

<p>The real take home lesson is a) listen to the static warnings b) only use booleans for boolean operations (Do not rely on implicit boolean
conversions) c) checked mode is there to stop you immediately if you do bad things during development. Dart works pretty hard
to force you to do boolean stuff explicitly and there are good reasons for this. Follow the warnings from the editor and your
code will be clearer, more maintainable and you will avoid a huge class of bugs.</p>
]]></content>
  </entry>
  
</feed>
