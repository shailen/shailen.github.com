<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dartlang | Shailen Tuli's blog]]></title>
  <link href="http://shailen.github.com/blog/categories/dartlang/atom.xml" rel="self"/>
  <link href="http://shailen.github.com/"/>
  <updated>2013-01-03T09:04:54-08:00</updated>
  <id>http://shailen.github.com/</id>
  <author>
    <name><![CDATA[Shailen Tuli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A first app with web components using Dart and Web UI library]]></title>
    <link href="http://shailen.github.com/blog/2012/12/31/a-first-app-with-web-components-using-dart/"/>
    <updated>2012-12-31T17:54:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/12/31/a-first-app-with-web-components-using-dart</id>
    <content type="html"><![CDATA[<p>Its time to finally create a simple <code>hello world</code> app using web components and
the dart Web UI library.</p>

<p>There is already a ton of literature out there on why web components are a
tremendously good idea and I won't try to do a huge 'sell' here.  If you are
completely new to web components, I can recommend
<a href="http://blog.sethladd.com/2012/11/your-first-web-component-with-dart.html">this really good introductory blog post by Seth Ladd</a></p>

<p>Or, if you are impatient, here's an (almost) tweet sized summary: web components
allow developers to encapsulate their UI elements as easily reusable components.
You can define <code>templates</code> with markup that is inert until activated later,
apply <code>decorators</code> to enhance the look of those templates, create <code>custom
elements</code> and play with the <code>shadow DOM</code>. In this little app, we will not be
tikering with <code>decorators</code> or the <code>shadow DOM</code>; we <em>will</em> be creating
<code>templates</code> and defining our own <code>custom element</code>.</p>

<p>The app is called <code>bookstore</code> and you can find the code at
<code>https://github.com/shailen/bookstore</code>.</p>

<p>Since I am new to web components and the Dart <code>Web UI</code> library, I am going to
keep this simple. In its current iteration, the app will show the user the list
of books in the bookstore and let the user add books to the collection.
The plan is to start with something minimal and over the next few weeks and
months build something a little bit elaborate (add Authors, Publishers, more
attributes to our Book class, reviews, etc) while preserving the <code>one-page</code> feel
of the app.</p>

<h2>Important Files</h2>

<p>There are a few important files in <code>bookstore</code>'s web directory that are worth
discussing now:</p>

<p><code>lib/models.dart</code> contains code for a <code>Book</code> class</p>

<p><code>web/books.html</code> contains the basic markup for the app</p>

<p><code>web/books.dart</code> contains the Dart code that goes with that markup</p>

<p><code>web/book_component.html</code> contains the markup for our web component</p>

<p><code>web/book_component.dart</code> contains the Dart code for our web component</p>

<p><code>build.dart</code> helps use compile our code so that it can be run</p>

<p>We'll discuss each of these files in detail soon.</p>

<h2>lib/models.dart</h2>

<p>We're going to be creating books. This file defines a simple <code>Book</code> class. Our
books only have 1 attribute for now, a title (I told you this was simple ;).</p>

<pre><code>library models;

class Book {
  String title;
  Book(this.title);
}
</code></pre>

<h2>web/books.html</h2>

<p>Here is the entirety of teh <code>web/books.html</code> file. Consider this an entry point
into the app:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Books&lt;/title&gt;
    &lt;link rel="components" href="book_component.html"&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Books&lt;/h1&gt;

    &lt;input id="new-book" type="text" placeholder="add another title"&gt;
    &lt;button on-click="createNewBook()"&gt;Add Book&lt;/button&gt;

    &lt;ul id="books"&gt;
      &lt;template iterate="book in books"&gt;
        &lt;x-book-item book="{{ book }}"&gt;&lt;/x-book-item&gt;
      &lt;/template&gt;
    &lt;/ul&gt;

    &lt;!-- this is the non web-component way to create the &lt;li&gt;s
    &lt;ul&gt;
      &lt;template iterate='book in books'&gt;
        &lt;li&gt;{{ book.title }}&lt;/li&gt;
      &lt;/template&gt;
    &lt;/ul&gt;
    --&gt;

    &lt;script type="application/dart" src="books.dart"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="https://dart.googlecode.com/svn/branches/bleeding_edge/dart/client/dart.js"&gt;&lt;/script&gt;

  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>A few things to notice here:</p>

<pre><code>&lt;link rel="components" href="book_component.html"&gt;
</code></pre>

<p>is the way you access the contents of our web component from this file.</p>

<p>We create an <code>input</code> where the user enters the name of a book and an
accompanying <code>button</code>:</p>

<pre><code>&lt;input id="new-book" type="text" placeholder="add another title"&gt;
&lt;button on-click="createNewBook()"&gt;Add Book&lt;/button&gt;
</code></pre>

<p>Notice the <code>on-click</code>? That is the way we inline an event listener: when the
button is clicked, <code>createNewBook()</code> fires (we'll get to that function soon)</p>

<p>And finally the code that actually deals with the web component:</p>

<pre><code>&lt;ul id="books"&gt;
  &lt;template iterate="book in books"&gt;
    &lt;x-book-item book="{{ book }}"&gt;&lt;/x-book-item&gt;
  &lt;/template&gt;
&lt;/ul&gt;
</code></pre>

<p>A few things to note here. We define a <code>&lt;template&gt;</code> tag; we loop over our
collection of books (stored in a variable <code>books</code> in <code>web/books.dart</code>); we
instantiate our web component (<code>&lt;x-book-item&gt;&lt;/x-book-item&gt;</code>) and we pass each
<code>book</code> in the loop as a template variable when we instantiate the web component.</p>

<p>There's a lot going on here. Make sure you understand the above paragraph!</p>

<h2>web/books.dart</h2>

<p><code>web/books.html</code> has a link to a Dart file at the bottom:</p>

<pre><code>&lt;script type="application/dart" src="books.dart"&gt;&lt;/script&gt;
</code></pre>

<p>And here is what <code>books.dart</code> looks like:</p>

<pre><code>import 'dart:html';
import 'package:bookstore/models.dart';

List&lt;Book&gt; books = [];

// binding created auto-magically!
void createNewBook() {
  var input = query("#new-book");
  books.add(new Book(input.value));
  input.value = "";
}

main() {
  // create some data so the page doesn't look empty
  ["War and Peace", "The Idiot", "Crime and Punishment"].forEach((title) {
    books.add(new Book(title));
  });
} 
</code></pre>

<p>It is pretty straightforward stuff: we import <code>models.dart</code>, the file that
contains the <code>Book</code> class; we create a <code>books</code> variable to store our collection.
We define <code>createNewBook()</code> to add a book to <code>books</code>, and we define a <code>main()</code>
function.</p>

<p>This Dart file MUST contain a <code>main()</code>, even an empty one will do.  In our case,
we will add a few books to our <code>books</code> collection, so that there is some data to
display.</p>

<h2>web/book_component.html</h2>

<p>This contains the code that defines our web component:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;body&gt;
    &lt;element name="x-book-item" constructor="BookComponent" extends="li"&gt;
      &lt;template&gt; 
        &lt;li&gt;{{ book.title }}&lt;/li&gt;
      &lt;/template&gt;

      &lt;script type="application/dart" src="book_component.dart"&gt;&lt;/script&gt;
    &lt;/element&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>A few things to understand here:  we create a custom <code>&lt;element&gt;</code>; we give it a
name, <code>x-book-item</code> (all element names must begin with an <code>x-</code>); we call a
constructor, <code>BookComponent</code> (defined in <code>web/book_componenet.dart</code>, we'll get
to that file shortly) and we declare that our custom element <code>extends</code> and <code>li</code>.</p>

<p>Inside our <code>&lt;element&gt;</code>, we create a <code>&lt;template&gt;</code> that stores the <code>&lt;li&gt;</code> that
contains a book's title.</p>

<p>And finally, we link to the accompanying Dart file, <code>book_component.dart</code>.</p>

<h2>web/book_component.dart</h2>

<p>Here we get to define our <code>BookComponent</code> class (remember that we declared that
the <code>&lt;element&gt;</code> we created in <code>book_componenet.html</code> use this constructor?):</p>

<pre><code>import 'package:web_ui/web_ui.dart';
import 'package:bookstore/models.dart';

class BookComponent extends WebComponent {
  Book book;
}
</code></pre>

<p><code>BookComponent</code> extends <code>WebComponent</code> (this is the only option for subclassing
at the moment; that may change in the future) and contains a <code>book</code> attribute
(this can be set using the <code>book =</code> syntax when the web component is
initialized). That's it.</p>

<h2>build.dart</h2>

<pre><code>import 'package:web_ui/component_build.dart';
import 'dart:io';

void main() {
  build(new Options().arguments, ['web/books.html']);
}
</code></pre>

<p>To actually build the project, <code>run</code> <code>build.dart</code> (this will create an <code>out</code>
directory); then <code>run</code>  <code>web/out/books.html</code>.</p>

<h2>pubspec.yaml</h2>

<p>The app only has a single <code>pub</code> dependency, <code>web_ui</code>:</p>

<pre><code>name: bookstore
description: A sample app to demonstrate the use of a web component

dependencies:
    web_ui
</code></pre>

<h2>Summary</h2>

<p>This is a fair bit of code for a simple hello-world caliber app. Is all this web
component stuff really necessary, or is it overkill?</p>

<p>We're just starting out, so this may seem like too much of a production given
what the needs of our app. But we have already established a
pretty important development principle: our UI elements can be nicely
ENCAPSULATED (!) and then used as necessary. We have taken the first baby steps
towards creating a widget that displays the content of each book. As our
application grows in complexity, our 'widget' will become more elaborate and we
will want to use it in all sorts of different contexts in our app. A composable,
encapsulated UI component - a web component - that can be instantiated with
varying arguments will then prove to be quite useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setting up continuous integration for dart using drone.io]]></title>
    <link href="http://shailen.github.com/blog/2012/12/31/setting-up-continuous-integration-for-dart-using-drone-io/"/>
    <updated>2012-12-31T14:58:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/12/31/setting-up-continuous-integration-for-dart-using-drone-io</id>
    <content type="html"><![CDATA[<h2>Creating a dummy project</h2>

<p>I created a very simple project, <code>droneDemo</code>, to show how to set up Continuous Integration
on drone.io for Dart projects. The code can be found <a href="https://github.com/shailen/droneDemo">here on Github</a>.</p>

<p><code>droneDemo</code> defines just two methods, <code>add()</code> and <code>multiply()</code>. These
can be found in <code>lib/</code>. Tests for these methods can be found in <code>test/</code>. The
<code>pubspec.yaml</code> file needs to declare a <code>unittest</code> dependency for these tests to
work.</p>

<p>This is about as simple a project as you can have and there is little need for
explanation. But it is worth delving into 2 points:</p>

<p>1) You should add <code>packages</code> to your <code>.gitignore</code>. This is to tell <code>git</code> not to
commit the <code>symlinks</code> created by <code>pub</code> to version control. These symlinks are
meaningful in the context of your filesystem but will trip drone.io.</p>

<p>If you already started your demo project and ended up with the symlinks, remove
them.</p>

<p>2) drone.io needs a way to run all your tests. So far, Dart does not ship with a
test runner, so you'll have to cobble together something yourself.</p>

<p>Here's what I did: my tests live in 2 different files, <code>test/add_test.dart</code> and
<code>test/multiply_test.dart</code>. I declared both files as libraries (see the <code>library add_test;</code>
and the <code>library multiply_test;</code> declaration at the top of each file) and
<code>import</code>ed  components from them into <code>test/test_runner.dart</code>.</p>

<p>   import "package:unittest/unittest.dart";
   import "add_test.dart" as add_test;
   import "multiply_test.dart" as multiply_test;</p>

<p>   void main() {</p>

<pre><code> add_test.main();
 multiply_test.main();
</code></pre>

<p>   }</p>

<p>So, calling <code>dart test/add_test.dart</code> or <code>dart test/multiply_test.dart</code> runs
only one test; calling <code>dart/test_runner.dart</code> runs both the tests.</p>

<p>With this out of the way, we can shift our attention to drone.io.</p>

<h2>Drone.io: Basic Setup</h2>

<p>Set up account at <code>https://drone.io/signup</code>.</p>

<p>On your <code>dashboard</code>, click on the <code>New Project</code> on the top right.</p>

<p>Pick <code>Dart</code> as the project language.</p>

<p>Pick <code>Git</code> as your Repository type.</p>

<p>Add the project name (I added <code>droneDemo</code>).</p>

<p>Add the Repository URL (mine was <code>https://github.com/shailen/droneDemo.git</code>).
Make sure your github repo is set to use the <code>http</code> method, not the <code>ssh</code> method.</p>

<p>Press <code>Create</code>.</p>

<h2>Configuring your Build</h2>

<p>After you press <code>Create</code>, you will be redirected to the <code>script/config</code> page.
Here, you will have to tell drone.io how to run your tests.</p>

<p>In the <code>Commands</code> section, type the following:</p>

<pre><code>pub install
dart test/test_runner.dart
</code></pre>

<p>Remember <code>test/test_runner.dart</code> was our consolidating test runner? This is
where the trouble we went through sewing our tests together pays off.</p>

<p>Press <code>Save</code> and when you get the message that tells you the build was
successfully saved, press the blue <code>Build Now</code> button at the top.</p>

<p>A popup will appear with a <code>Build Output</code> link.  Click that link.</p>

<p>Voila! You are swimming in a sea of green!</p>

<p><img src="/images/drone_io_success.png"></p>

<p>My build output can be seen at: <code>https://drone.io/shailen/droneDemo/1</code></p>

<h2>Setting up Continuous Build</h2>

<p>Click on <code>settings</code> for your <code>drone.io</code> project</p>

<p>Click on <code>General</code> in the left column. You will see a couple of links under <code>Build Hooks</code>. Copy the top one.</p>

<p>Now, go back to your project on <code>github</code>. Mine is at <code>https://github.com/shailen/droneDemo</code>.</p>

<p>Click on <code>Settings</code>.</p>

<p>Click on <code>Service Hooks</code> (left column).</p>

<p>Click on the <code>WebHook Urls</code> link at the top.</p>

<p>Paste the <code>build hook</code> you had copied earlier in the text input box provided
and press <code>Update Settings</code>.</p>

<p>From now on, every time you commit to your project on github, drone.io will run
all your tests.</p>

<p>I changed one of my tests so that it was failing and pushed to github. No
surprise, the build now show <code>Failed</code> (<code>https://drone.io/shailen/droneDemo</code>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Randomness in Dart: nextBool(), nextInt(), and nextDouble()]]></title>
    <link href="http://shailen.github.com/blog/2012/12/10/random-dart-nextbool-nextint-and-nextdouble/"/>
    <updated>2012-12-10T14:36:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/12/10/random-dart-nextbool-nextint-and-nextdouble</id>
    <content type="html"><![CDATA[<p>The <code>Random</code> class in <code>dart:math</code> contains 3 methods, <code>nextBool()</code>, <code>nextInt()</code>
and <code>nextDouble()</code>. To use <code>Random</code>, you will need a <code>import 'dart:math</code> in your
code.</p>

<h2>nextBool()</h2>

<p>simply returns <code>true</code> or <code>false</code> at random. Here is a little
function, <code>randUpcase()</code> that demonstrates <code>randBool()</code> use. <code>randUpcase()</code>
takes a string as an argument, and converts each character in the string to
uppercase if random.nextBool() is <code>true</code> and leaves it untouched if it is
<code>false</code>.</p>

<pre><code>String randUpcase(String s) {
  Random random = new Random();
  List&lt;String&gt; chars = s.split('');
  return Strings.join(chars.map(
    (char) =&gt; random.nextBool() ? char.toUpperCase() : char), '');
}
</code></pre>

<p>And here is some sample usage:</p>

<pre><code>var herbs = ["parsley", "sage", "rosemary", "thyme"];
print(herbs.map((herb) =&gt; randUpcase(herb))); // [pARslEY, SaGE, roSEMaRY, tHYME]
</code></pre>

<h2>nextInt()</h2>

<p>takes a <code>max</code> int argument and generates a positive int between 0 (inclusive) and <code>max</code>, exclusive.</p>

<p>To generate a random int within a range, you can do something like this:</p>

<pre><code>int randRange(int min, int max) {
  var random = new Random();
  return min + random.nextInt(max - min);
}
</code></pre>

<p>You can also use <code>nextInt()</code> to randomly shuffle a list (using the familiar
Fisher-Yates-Knuth algorithm):</p>

<pre><code>List shuffle(List items) {
  var random = new Random();
  for (var i = items.length - 1; i &gt; 0; i--) {
    var j = random.nextInt(i);
    var temp = items[i];
    items[i] = items[j];
    items[j] = temp;
  }
  return items;
}
</code></pre>

<p>You can use it like this:</p>

<pre><code>var items = ["fee", "fi", "fo", "fum", "smell", "Englishman"];
print(shuffle(items)); // [fo, smell, fum, Englishman, fee, fi]
</code></pre>

<h2>nextDouble()</h2>

<p>generates a random floating point value distributed between 0.0
and 1.0. Here is a little function to simulate a biased coin toss; the <code>percent</code>
argument alters the percent a coin will return heads ('H'). This is pretty much cribbed from
<a href="http://stackoverflow.com/questions/477237/how-do-i-simulate-flip-of-biased-coin-in-python">this discussion on Stack Overflow</a>:</p>

<pre><code>String flip(num percent) {
  Random random = new Random();
  return random.nextDouble() &lt; percent ? 'H' : 'T';
}
</code></pre>

<p>And here is some code to test that it works:</p>

<pre><code>int n = 1000;
int heads = 0;
for (var i = 0; i &lt; 1000; i++) {
  if(flip(.20) == "H") heads++;
}
print(heads/n); // 0.209, 0.196, etc.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Only Some of Your Dart Tests with filterTests()]]></title>
    <link href="http://shailen.github.com/blog/2012/12/07/running-only-some-of-your-tests/"/>
    <updated>2012-12-07T10:00:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/12/07/running-only-some-of-your-tests</id>
    <content type="html"><![CDATA[<p>The Dart <code>unittest</code> library allows you to run just a single test; to do so,
just change the call for that test form <code>test()</code> to <code>solo_test()</code>.</p>

<p>Another way to run a subset of your tests is by using the <code>filterTests()</code>
function. <code>filterTests()</code> takes a String or a RegExp argument and matches
it against each test description; if the description matches, the test
runs, otherwise, it doesn't.</p>

<p>Before you use <code>filterTests()</code>, you need to disable the automatic running of
tests (set <code>autoStart</code> to false) and ensure that the your configuration is
initialized.</p>

<p>You can do this by creating a custom configuration:</p>

<pre><code>import "package:unittest/unittest.dart";
import "package:args/args.dart";

class FilterTests extends Configuration {
  get autoStart =&gt; false;
}

void useFilteredTests() {
  configure(new FilterTests());
  ensureInitialized();  
}
</code></pre>

<p>Then, you can call <code>useFilteredTests()</code> in your <code>main()</code>, define all your
tests, call <code>filteredTests()</code> with a string or regexp argument and run your
tests using <code>runTests()</code>:</p>

<pre><code>void main() {
  useFilteredTests();

  // your tests go here

  filterTests(some_string_or_regexp);
  runTests();
}
</code></pre>

<p>Here is a little working example:</p>

<pre><code>void main() {
  useFilteredTests();

  test("one test", () {
    expect(1, equals(1));
  }); 

  test("another test", () {
    expect(2, equals(2));
  });

  test("and another", () {
    expect(3, equals(3));
  });

  filterTests('test');
  // filterTests('another');

  runTests();
}
</code></pre>

<p><code>filterTests('test')</code> will run the first 2 tests; <code>filterTests('another')</code> will
run the last 2 tests.</p>

<p>It is easy to make this <em>considerably</em> more useful by getting the argument to
<code>filterTests()</code> from the command line. That way, you can control what subset of
tests to run without having to change the code in your test suite. Here is a
slightly expanded version of the same example:</p>

<pre><code>void main() {
  useFilteredTests();
  ArgParser argParser = new ArgParser();
  Options options = new Options();
  ArgResults results = argParser.parse(options.arguments);
  List&lt;String&gt; args = results.rest; // get the args from the command line

  test("one test", (){
    expect(1, equals(1));
  }); 

  test("another test", (){
    expect(2, equals(2));
  });

  test("and another", (){
    expect(3, equals(3));
  });

  // we add a group() to show how we can easily run just the tests
  // contained in it
  group("foo", () {
    test("this", (){
      expect('bar', equals('bar'));
    }); 

    test("that", (){
      expect('baz', equals('baz'));
    });
  });

  if (!args.isEmpty) {
    filterTests(args[0]);
  }
  runTests();
}
</code></pre>

<p>You can run the tests from the command line by using the</p>

<pre><code>`dart name_of_file.dart [keyword]`
</code></pre>

<p>syntax. If the keyword is <code>this</code>, only one test will run. If the keyword is
<code>foo</code>, all tests in the <code>group()</code> with the description of <code>foo</code> will run.
If you do not provide a keyword, all 5 tests will run.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dart: Customizing Unittest Run Output]]></title>
    <link href="http://shailen.github.com/blog/2012/12/06/customizing-the-look-of-your-test-run-output/"/>
    <updated>2012-12-06T14:57:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/12/06/customizing-the-look-of-your-test-run-output</id>
    <content type="html"><![CDATA[<p><code>unittest</code> provides a default configuration that determines the
content and appearance of the output from running your tests. In addition, the
package provides fancier configurations for running tests in the browser, or on
the VM.</p>

<p>But suppose you want to customize the test run output? Maybe you are an ardent
Test Driven Development (TDD) hacker, and want to have your test output be
in sync with TDD Red-Green-Refactor workflow (passing tests in green, failing
tests in red); maybe you want a green "." printed to the command line for every
passing test (you don't care for all the "PASS: ..." messages that the default
configuration gives you), and a red 'F' printed for every failing test, with
more details about the failures in the summary. You also want the ouput to
list the file where the tests being run are located and you want to know how
long it takes to run all your tests.</p>

<p>To do all this, you need to extend the default <code>Configuration</code> class (see
<code>unittest/src/config.dart</code>) and customize your environment by passing an
instance of that class to <code>configure()</code> as an argument.
A <code>Configuration</code> has several functions that get called at different stages of
the testing process:</p>

<pre><code>onInit(), when the test framework is initialized
onStart(), before the first test is run
onTestStart(), when a test starts running
onTestResult(), upon the completion of each test
onDone(), when all tests are done
</code></pre>

<p>and you can override all of these.</p>

<p>Let's extend <code>Configuration</code> and begin by adding a few constants to help with the
presentation:</p>

<pre><code>class ColorTestRunner extends Configuration {
  const String NEUTRAL_COLOR = "\u001b[33;34m"; // blue
  const String PASS_COLOR = "\u001b[33;32m";    // green
  const String FAIL_COLOR = "\u001b[33;31m";    // red
  const String RESET_COLOR = "\u001b[33;0m";

  ...
}
</code></pre>

<p>We will prefix our failing output with <code>FAIL_COLOR</code>, passing output
with <code>PASS_COLOR</code> and use <code>RESET_COLOR</code> to revert back to the user's settings.
We will use <code>NEUTRAL_COLOR</code> to print a small introduction and the summary.</p>

<p>We are now ready to start filling out our <code>ColorTestRunner</code> class. The
<code>onInit()</code> of <code>Configuration</code> is empty; let's add a little introduction that
prints the name of the file containing the tests:</p>

<pre><code>void onInit() { 
  print(NEUTRAL_COLOR);
  Options options = new Options();  
  print("Running tests for ${options.script}");
  print(RESET_COLOR);
}
</code></pre>

<p>Now let's move on to <code>onStart()</code>. This is called after <code>onInit()</code> but before
the first test is run. In the default <code>Configuration</code>, this prints the
<code>unittest-suite-wait-for-done</code> message. We pushed our custom message in
the <code>onInit()</code>, so we don't need another message here. But this would be a
good place to start running the stopwatch for timing our tests:</p>

<pre><code>Stopwatch stopwatch = new Stopwatch();
void onStart() =&gt; stopwatch.start();
</code></pre>

<p><code>Configuration</code> defines the twin <code>onTestStart()</code> and <code>onTestResult()</code> functions
that basically define which test is currently being run:</p>

<pre><code>void onTestStart(TestCase testCase) {
  currentTestCase = testCase;
}

void onTestResult(TestCase testCase) {
  currentTestCase = null;
}
</code></pre>

<p>We don't need to tinker with <code>onTestRun()</code>, but we'll override <code>onTestResult()</code> to
output the green <code>.</code> or red <code>F</code> for passing and failing tests, respectively:</p>

<pre><code>void onTestResult(TestCase testCase) {
  var color = testCase.result == PASS ? PASS_COLOR : FAIL_COLOR;
  stdout.writeString("${color}${testCase.result == PASS ? '.' : 'F'}$RESET_COLOR");
  currentTestCase = null;
}
</code></pre>

<p>The <code>onDone()</code> function is where <code>Configuration</code> does the heavy lifting: it
outputs the status and description of each test as well as the error messages
and stack traces for failing tests. Then, it provides summary informtion for
the test run. We'll just skip over the passing tests and color-code our
summary (it will be red if even a single test fails). Then, we will output
the total time taken for the tests to run (remember the stopwatch we started in
<code>onStart()</code>?.</p>

<p>With a little bit of refactoring, and some additional formatting added to the
output, here is what the script looks like:</p>

<pre><code>library colorTestRunner;

import 'package:unittest/unittest.dart';
import 'dart:io';

/// Overrides default Configuration to provide colorful command line
/// output when tests are run. Loosely based on RSpec (https://www.relishapp.com/rspec).
/// Outputs green (passing) "." and red (failing) "F" characters as tests are running. 
/// If there are failing tests, provides detailed error report in red.
/// Provides a short summary.
class ColorTestRunner extends Configuration {
  const String NEUTRAL_COLOR = "\u001b[33;34m"; // blue
  const String PASS_COLOR = "\u001b[33;32m";    // green
  const String FAIL_COLOR = "\u001b[33;31m";    // red
  const String RESET_COLOR = "\u001b[33;0m";
  const int BORDER_LENGTH = 80;

  Stopwatch stopwatch = new Stopwatch();

  void onInit() =&gt; _printResultHeader();
  void onStart() =&gt; stopwatch.start();

  void onTestResult(TestCase testCase) {
    var color = testCase.result == PASS ? PASS_COLOR : FAIL_COLOR;
    _colorPrint(color, testCase);
    currentTestCase = null;
  }

  void onDone(int passed, int failed, int errors, List&lt;TestCase&gt; testCases,
              String uncaughtError) {
    stopwatch.stop();

    _printFailingTestInfo(testCases);
    _printSummary(passed, failed, errors, uncaughtError);
    print("${NEUTRAL_COLOR}Total time = ${stopwatch.elapsedMilliseconds / 1000} seconds.$RESET_COLOR");
  }

  void _printFailingTestInfo(List&lt;TestCase&gt; testCases) {
    print(FAIL_COLOR);
    for (var testCase in testCases) {
      if (testCase.result != PASS) {
        print("${testCase.result.toUpperCase()}: ${testCase.description}");

        if (testCase.message != '') {
          print(testCase.message);
        }

        if (testCase.stackTrace != null &amp;&amp; testCase.stackTrace != '') {
          print(testCase.stackTrace);
        }

        print(_repeatString(".", BORDER_LENGTH));
      }
    }
    print(RESET_COLOR);
  }

  void _printSummary(int passed, int failed, int errors, String uncaughtError) {
    if (_passed(failed, errors, uncaughtError)) {
      print(PASS_COLOR); 
      print("All $passed tests passed.");
    } else {
      print(FAIL_COLOR); 
      if (_noTestsFound(passed, failed, errors)) {
        print('No tests found.');
      } else if (uncaughtError != null) {
        print("Top-level uncaught error: $uncaughtError");
      } else {
        print("$passed PASSED, $failed FAILED, $errors ERRORS.");
      }
    }
  }

  bool _noTestsFound(int passed, int failed, int errors) {
    return passed == 0 &amp;&amp; failed == 0 &amp;&amp; errors == 0;
  }

  bool _passed(int failed, int errors, String uncaughtError) {
    return failed == 0 &amp;&amp; errors == 0 &amp;&amp; uncaughtError == null;
  }

  void _printResultHeader() {
    print(NEUTRAL_COLOR);
    Options options = new Options();  
    String description = "Running tests for ${options.script}";
    String frame = _repeatString("=", description.length);
    print(frame);
    print(description);
    print(frame);
    print(RESET_COLOR);
  }

  String _repeatString(String str, int times) {
    StringBuffer sb = new StringBuffer();
    for (var i = 0; i &lt; times; i++) {
      sb.add(str);  
    }
    return sb.toString();
  }

  void _colorPrint(String color, TestCase testCase) {
    stdout.writeString("${color}${testCase.result == PASS ? '.' : 'F'}$RESET_COLOR");
  }
}

/// The function that should be called right before the tests.
void useColorTestRunner() {
  configure(new ColorTestRunner());
}
</code></pre>

<p>To use this script, call the <code>useColorTestRunner()</code> just before where you have
defined your tests. Here is a simple use case:</p>

<pre><code>import 'package:unittest/unittest.dart';
import '&lt;path to&gt;/color_test_runner.dart';

num factorial(num n) {
  if (n &lt; 2) {
    return 1;
  } else {
    return n * factorial(n - 1);
  }
}

void main() {
  useColorTestRunner(); // we're using our own configuration

  test("when n is 0", () {   
    expect(factorial(0), equals(1));
  });

  test("when n is 1", () {
    expect(factorial(1), equals(1));
  });

  test("when n is &gt; 1", () {
    expect(factorial(5), equals(120));
  });
}
</code></pre>

<p>Call this from the command line: <code>dart &lt;test file&gt;.dart</code> and your output should
look like this:</p>

<p><img src="/images/passing_tests.png"></p>

<p>Everything is green. Great! But perhaps you were in a hurry and got your <code>0</code> and
<code>1</code> mixed up in the first test:</p>

<pre><code>test("when n is 0", () {   
  expect(factorial(1), equals(0)); // oops....!
});
</code></pre>

<p>If you run the tests now, you'll see:</p>

<p><img src="images/failing_tests.png"></p>
]]></content>
  </entry>
  
</feed>
