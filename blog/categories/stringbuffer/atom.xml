<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: StringBuffer | Shailen Tuli's tech blog]]></title>
  <link href="http://shailen.github.com/blog/categories/stringbuffer/atom.xml" rel="self"/>
  <link href="http://shailen.github.com/"/>
  <updated>2012-11-17T23:58:30-08:00</updated>
  <id>http://shailen.github.com/</id>
  <author>
    <name><![CDATA[Shailen Tuli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[character codes and strings in Dart]]></title>
    <link href="http://shailen.github.com/blog/2012/11/15/character-codes-and-strings-in-dart/"/>
    <updated>2012-11-15T15:29:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/15/character-codes-and-strings-in-dart</id>
    <content type="html"><![CDATA[<p>In my Python programs, I found use for the <code>ord()</code> and <code>chr()</code> builtins to convert between string characters and their
ASCII representations. Similar tools exist in Dart. To get a list of character codes for a string, use <code>charCodes</code>:</p>

<pre><code>String s = "hello";
print(s.charCodes);
// [104, 101, 108, 108, 111]
</code></pre>

<p>To get a specific character code, you can either subscript <code>charCodes</code>:</p>

<pre><code>print(s.charCodes[0]); 
</code></pre>

<p>or - this is the more common way - use <code>charCodeAt</code>:</p>

<pre><code>print(s.charCodeAt(0));
</code></pre>

<p>To assemble a string from a list of character codes, use the <code>String</code> factory, <code>fromCharCodes</code>:</p>

<pre><code>List&lt;int&gt; charCodes = [104, 101, 108, 108, 111];
print(new String.fromCharCodes(charCodes));
// "hello"
</code></pre>

<p>If you are using a StringBuffer to build up a string, you can add individual charCodes using <code>addCharCode</code>
(use <code>add()</code> to add characters; use <code>addCharCode()</code> to add charCodes):</p>

<pre><code>StringBuffer sb = new StringBuffer();
charCodes.forEach((charCode) {
  sb.addCharCode(charCode);
});

print(sb.toString());
// "Hello" 
</code></pre>

<p>Here is an implementation of the <code>rot13</code> algorithm, using the tools described above. <code>rot13</code>
is a simple letter substitution algorithm that rotates a string by 13 places by replacing each
character in it by one that is 13 characters removed ('a' becomes 'n', 'N' becomes 'A', etc.):</p>

<pre><code>String rot13(String s) {
  List&lt;int&gt; rotated = [];

  s.charCodes.forEach((charCode) {
    final int numLetters = 26;
    final int A = 65;
    final int a = 97;
    final int Z = A + numLetters;
    final int z = a + numLetters;

    if (charCode &lt; A ||
        charCode &gt; z ||
        charCode &gt; Z &amp;&amp; charCode &lt; a) {
      rotated.add(charCode);
    }
    else {
      if ([A, a].some((item){
        return item &lt;= charCode &amp;&amp; charCode &lt; item + 13;
      })) {
        rotated.add(charCode + 13);
      } else {
        rotated.add(charCode - 13);
      }   
    }
  });

  return (new String.fromCharCodes(rotated));
}
</code></pre>

<p>Running the code:</p>

<pre><code>var wordsList = [["Jung", "be", "purely", "barf"],
                  ["aha", "nun"]];
wordsList.forEach((word_list) {
  print(word_list.map((word) {
    return rot13(word);
  }));
});
// ["What", "or", "cheryl", "ones"]
// ["nun", "aha"] 
</code></pre>

<p>and:</p>

<pre><code>String str = "aMz###AmZ";
assert(rot13(rot13(str)) == str);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[string concatenation in dart]]></title>
    <link href="http://shailen.github.com/blog/2012/11/13/string-concatenation-in-dart/"/>
    <updated>2012-11-13T17:33:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/13/string-concatenation-in-dart</id>
    <content type="html"><![CDATA[<p>Let us start with a simple helloworld.dart example and use it to see how string concatenation works in Dart.</p>

<pre><code>void main() {
  print("hello, world!");
}
</code></pre>

<p>The above works, obviously. Now, if we were given this greeting as two strings, "hello, " and "world!", and asked
to join them together, we might be tempted to do:</p>

<pre><code>"hello, " + "world!"
</code></pre>

<p>This works in lots of languages, but not in Dart. The + operator has not been overloaded in the String class, the above code throws
a <code>NoSuchMethodError</code>.</p>

<p>Not a problem: Dart gives us lots of ways to contcatenate strings. I list the most common ways
below. <em>Above the examples you will see some <strong>crude</strong> benchmarks that I calculated by running each example a million
times on my MacBook. These can give a <strong>general</strong> sense of the relative efficiency of each method</em>.</p>

<p>The easiest, most efficient way to concat strings is by using adjacent string literals:</p>

<pre><code>.041 seconds
String a = "hello, " "world!";
</code></pre>

<p>This still works if the adjacent strings are on different lines:</p>

<pre><code>.040 seconds
String b = "hello, "
    'world!';
</code></pre>

<p>Dart also has a <code>StringBuffer</code> class, and this can be used to build up a <code>StringBuffer</code> object
and convert it to a string by calling <code>toString()</code> on it:</p>

<pre><code>.689 seconds
var sb = new StringBuffer();
["hello, ", "world!"].forEach((item) {
  sb.add(item);
  });
String c = sb.toString();
</code></pre>

<p>The <code>Strings</code> class (notice the plural) gives us 2 methods, <code>join()</code> and <code>concatAll()</code> that
can also be used. <code>Strings.join()</code> takes a delimiter as a second argument:</p>

<pre><code>.408 seconds
String d = Strings.join(["hello", "world!"], ", ");

.385 seconds
String e = Strings.concatAll(["hello", "world"]);
</code></pre>

<p>All of the above work, but if you are looking for a <code>+</code> substitute, use adjacent string literals;
if you need to join a list of strings using a delimiter,
use <code>Strings.join()</code>. If you plan on building a very long string, the
<code>StringBuffer</code> class can gather the components quite efficiently and convert them to a string only
when needed.</p>

<p>You can also use string interpolation; that will be the subject of my next post.</p>
]]></content>
  </entry>
  
</feed>
