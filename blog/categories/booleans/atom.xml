<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: booleans | Shailen Tuli's tech blog]]></title>
  <link href="http://shailen.github.com/blog/categories/booleans/atom.xml" rel="self"/>
  <link href="http://shailen.github.com/"/>
  <updated>2012-11-17T23:03:17-08:00</updated>
  <id>http://shailen.github.com/</id>
  <author>
    <name><![CDATA[Shailen Tuli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[using boolean expressions for assignment in Dart]]></title>
    <link href="http://shailen.github.com/blog/2012/11/17/using-boolean-expressions-for-assignment-in-dart/"/>
    <updated>2012-11-17T21:52:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/17/using-boolean-expressions-for-assignment-in-dart</id>
    <content type="html"><![CDATA[<p>I often do this in Javascript:</p>

<pre><code>var Point = function(options) {
  options = options || {};
  this.x = options['x'] || 0;
  this.y = options['y'] || 0;
}
</code></pre>

<p>in Ruby, I do this:</p>

<pre><code>age ||= 16; // if age is `nil` or `false`, assign it a value of 16
</code></pre>

<p>or, this:</p>

<pre><code>a, b, c = 1, 2, 3
d = a &amp;&amp; b &amp;&amp; c
// d will equal 3
</code></pre>

<p>In these cases, the boolean expressions return the value of the last evaluation. So, how should this be done
in Dart? Consider this code:</p>

<pre><code>var x;
var y = x || 10;
</code></pre>

<p>In checked mode, this generates an exception (more on that in a moment). What do you think happens in unchecked mode?  What
is the value of <code>y</code>?</p>

<p>At first glance, the code looks reasonable, but the answer is <em>really</em> problematic. Based on other languages I have used, I would expect <code>y</code> to equal <code>10</code>.
In Dart, this does not happen. <code>y</code> actually gets assigned a value of <code>false</code>. Since 10 is not explicitly <code>true</code>, it evaluates to
<code>false</code>. This is exactly what Dart is supposed to do. See my <a href="http://shailen.github.com/blog/2012/11/16/booleans-in-dart/">post</a> from yesterday it this isn't clear.</p>

<p>Now, in checked mode (you are using checked mode, right?), <code>y</code> doesn't get a value at all because we get an error:</p>

<pre><code>Unhandled exception:
type 'Null' is not a subtype of type 'bool' of 'boolean expression'.
</code></pre>

<p>This is Dart's way of telling us that it is not going to do implicit boolean conversion for us when using <code>||</code> and it expects to see a boolean where it
now sees a <code>null</code> (<code>x</code> is null).  Changing the code to:</p>

<pre><code>var y = 5 || 10;
</code></pre>

<p>we get a slightly different error message:</p>

<pre><code>Unhandled exception:
type 'int' is not a subtype of type 'bool' of 'boolean expression'.
</code></pre>

<p>No good. Dart wants booleans around the <code>||</code>. Something like this works fine:
   int x = 10;
   bool y = x % 3 == 1 || x % 5 == 2;
   // y is true</p>

<p>So, how do we correctly handle assignment based on boolean evaluation? We do an explicit test and not rely on <code>||</code> or <code>&amp;&amp;</code> to implicitly
handle this for:</p>

<pre><code>int x; // x is null
int y = x == null ? 0 : x;
// y now has a value of 0
</code></pre>

<p>The lessons of all this? <strong>Use checked mode</strong>. Don't rely on Dart's boolean expressions to magically return boolean values; if such values
are needed, obtain them directly yourself. Its much clearer to be explicit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[booleans in dart]]></title>
    <link href="http://shailen.github.com/blog/2012/11/16/booleans-in-dart/"/>
    <updated>2012-11-16T18:32:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/16/booleans-in-dart</id>
    <content type="html"><![CDATA[<p>We've all written code that looks something like this:</p>

<pre><code>if (x) {
  // do something
} else {
  // do something else
}
</code></pre>

<p>In Javascript, the <code>if (x)</code> would evaluate to false if <code>x</code> was <code>false</code>, <code>null</code>, <code>undefined</code>, the number <code>0</code> (or <code>0.0</code>),
an <code>''</code> or <code>NaN</code> (these are all falsy in Javascript); otherwise it would evaluate to true.</p>

<p>If this code were rewritten in Python, the <code>if (x)</code> would evaluate to false if <code>x</code> was <code>None</code>, <code>false</code>, zero (<code>0</code>,
<code>0.0</code>, <code>0L</code>, etc.), an empty string (<code>''</code>), list (<code>[]</code>), tuple (<code>()</code>) or dict(<code>{}</code>);
otherwise it would evaluate to true.</p>

<p>So, what are the truthy and falsy lists for Dart? To answer that, let's look at what the
language spec says about booleans:</p>

<pre><code>Boolean conversion maps any object o into a boolean. Boolean conversion is defined  by the function
  (bool v){
    assert(v != null);
    return identical(v, true);
  }(o)
</code></pre>

<p>In other words, anything that is not explicitly <code>true</code>, is <code>false</code> in Dart. So, in our example, if <code>if (x)</code> would evaluate to
<code>true</code> if and only if <code>x</code> equalled the the boolean literal <code>true</code> (or an expression that evaluated to <code>true</code> (<code>3 % 2 == 1</code>, say)),;
otherwise it would evaluate to false.</p>

<p>This is very simple. There are no truthy/falsy lists to memorize; it is all very clear, quite correct and ....</p>

<p>likely to get you quickly into trouble. Wait, what?</p>

<p>This is legal Dart code, right? Well, that depends if you are in checked mode or not.  In unchecked mode, the code works exactly
as described above. However, in <em>checked mode</em>, any <code>if (x)</code> type constructs will generate an exception unless x is a boolean. Let's
look at that function from the language spec again:</p>

<pre><code>(bool v) {

}
</code></pre>

<p>in checked mode, v <strong>must be a bool</strong>. If it isn't, the Dart editor will complain and throw an exception. We will never
get to the stage of figuring out whether our <code>if (x)</code> evaluates to true or false.</p>

<p>Going back to other languages for a moment: I always felt that Javascript and Python had too many falsy values. I liked
that in Ruby, only <code>false</code> and <code>nil</code> evaluated to false; everything else was true. So, instead of writing <code>if myList ...</code>, you
would write <code>if myList.empty? ..</code> in Ruby, making your intent quite clear.
Dart actually goes beyond
Ruby in this regard and <em>really</em> simplifies things:  <code>false</code> (and boolean expressions that return <code>false</code>) are false;
<code>true</code> (and boolean expressions that return <code>true</code>) are true. <em><strong>Everything else is neither false nor true</strong></em>.</p>

<p>So, as a programmer, how should you handle the reality that the Dart's boolean symantics change based on whether you
are in checked or unchecked mode?  My recommendation: always code in checked mode and be quite explicit about boolean
expressions.</p>

<p>Avoid code like this (you will get an exception in checked mode):</p>

<pre><code>String s = '';
if (s) { 
}
</code></pre>

<p>This can be rewritten more clearly:</p>

<pre><code>if (s.isEmpty) {
  // notice that it is `isEmpty`, not `isEmpty()`
}
</code></pre>

<p>The following:</p>

<pre><code>List myList = [1, 2, 3];
if(myList.indexOf(1)) {};
</code></pre>

<p>should become:</p>

<pre><code>if (myList.indexOf(1) == 0) {
}
</code></pre>

<p>and:</p>

<pre><code>int num;
if (num) {
}
</code></pre>

<p>should become:</p>

<pre><code>if (num == null) {
}
</code></pre>

<p>The real take home lesson is a) listen to the static warnings b) only use booleans for boolean operations (Do not rely on implicit boolean
conversions) c) checked mode is there to stop you immediately if you do bad things during development. Dart works pretty hard
to force you to do boolean stuff explicitly and there are good reasons for this. Follow the warnings from the editor and your
code will be clearer, more maintainable and you will avoid a huge class of bugs.</p>
]]></content>
  </entry>
  
</feed>
