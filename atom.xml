<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shailen Tuli's tech blog]]></title>
  <link href="http://shailen.github.com/atom.xml" rel="self"/>
  <link href="http://shailen.github.com/"/>
  <updated>2012-11-14T12:13:15-08:00</updated>
  <id>http://shailen.github.com/</id>
  <author>
    <name><![CDATA[Shailen Tuli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dart String Interpolation]]></title>
    <link href="http://shailen.github.com/blog/2012/11/14/dart-string-interpolation/"/>
    <updated>2012-11-14T11:23:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/14/dart-string-interpolation</id>
    <content type="html"><![CDATA[<p>You can access the value of an expression inside a string by using <code>${expression}</code>.</p>

<pre><code>var greeting = "Hello";
var person = "Rohan";

print("${greeting}, ${person}!"); // prints "Hello, Rohan!"
</code></pre>

<p>If the expression is an identifier, the <code>{}</code> can be skipped.</p>

<pre><code>print("$greeting, $person");
</code></pre>

<p>If the variable inside the <code>{}</code> isn&#8217;t a string, the variable&#8217;s <code>toString()</code> method is called:</p>

<pre><code>int x = 5;
print("There are ${x.toString()} people in this room");
</code></pre>

<p>The call to <code>toString()</code> is unnecessary (although harmless) in this case: <code>toString()</code> is already defined
for ints and Dart automatically calls <code>toString()</code>. What this does mean, though, is that it is the user&#8217;s
responsibility to define a <code>toString()</code> method when interpolating user-defined objects.</p>

<p>You can interpolate expressions of arbitrary complexity by placing them inside <code>${}</code>:</p>

<p>A ternary <code>if..else</code>:</p>

<pre><code>int x = 5;
print("There are ${x &lt; 10 ? "a few" : "many"} people in this room");
</code></pre>

<p>List and Map operations:</p>

<pre><code>List list = [1, 2, 3, 4, 5];
print("The list is $list, and when squared it is ${list.map((i) {return i * i;})}");
// The list is [1, 2, 3, 4, 5], and when squared it is [1, 4, 9, 16, 25]

Map map = {"ca": "California", "pa": "Pennsylvania"};
print("I live in sunny ${map['ca']}");
// I live in sunny California
</code></pre>

<p>Notice above that you can access <code>$list</code>(an identifier) without using <code>{}</code>, but the call to <code>list.map</code>(an expression)
needs to be inside <code>{}</code>. Similarly, in the example below, <code>$x</code> works, but <code>{}</code> are required for <code>-x</code>:</p>

<pre><code>print("x = $x and -x = ${-x}");
// x = 5 and -x = -5
</code></pre>

<p>Expressions inside <code>${}</code> can be arbitrarily complex:</p>

<pre><code>List names = ['John', 'Sophena', 'Henrietta'];
print("${
  ((names) {
      return names[(new math.Random()).nextInt(names.length)];
  })(names)} is the most valueable member of our team");
</code></pre>

<p>The code above defines an anonymous function to pick a random name from a list and then calls that function with
<code>names</code> as an argument. All of this is done as part of string interpolation.</p>

<p>Creating a function and immediately calling it is useful in a lot of situations (it is a common practice in Javascript); doing so as part
of string interpolation is needlessly clever and should probably be avoided.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[string concatenation in dart]]></title>
    <link href="http://shailen.github.com/blog/2012/11/13/string-concatenation-in-dart/"/>
    <updated>2012-11-13T17:33:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/13/string-concatenation-in-dart</id>
    <content type="html"><![CDATA[<p>Let us start with a simple helloworld.dart example and use it to see how string concatenation works in Dart.</p>

<pre><code>void main() {
  print("hello, world!");
}
</code></pre>

<p>The above works, obviously. Now, if we were given this greeting as two strings, &#8220;hello, &#8221; and &#8220;world!&#8221;, and asked
to join them together, we might be tempted to do:</p>

<pre><code>"hello, " + "world!"
</code></pre>

<p>This works in lots of languages, but not in Dart. The + operator has not been overloaded in the String class, the above code throws
a <code>NoSuchMethodError</code>.</p>

<p>Not a problem: Dart gives us lots of ways to contcatenate strings. I list the most common ways
below. <em>Above the examples you will see some <strong>crude</strong> benchmarks that I calculated by running each example a million
times on my MacBook. These can give a <strong>general</strong> sense of the relative efficiency of each method</em>.</p>

<p>The easiest, most efficient way to concat strings is by using adjacent string literals:</p>

<pre><code>.041 seconds
String a = "hello, " "world!";
</code></pre>

<p>This still works if the adjacent strings are on different lines:</p>

<pre><code>.040 seconds
String b = "hello, "
    'world!';
</code></pre>

<p>Dart also has a <code>StringBuffer</code> class, and this can be used to build up a <code>StringBuffer</code> object
and convert it to a string by calling <code>toString()</code> on it:</p>

<pre><code>.689 seconds
var sb = new StringBuffer();
["hello, ", "world!"].forEach((item) {
  sb.add(item);
  });
String c = sb.toString();
</code></pre>

<p>The <code>Strings</code> class (notice the plural) gives us 2 methods, <code>join()</code> and <code>concatAll()</code> that
can also be used. <code>Strings.join()</code> takes a delimiter as a second argument:</p>

<pre><code>.408 seconds
String d = Strings.join(["hello", "world!"], ", ");

.385 seconds
String e = Strings.concatAll(["hello", "world"]);
</code></pre>

<p>All of the above work, but if you are looking for a <code>+</code> substitute, use adjacent string literals;
if you need to join a list of strings using a delimiter,
use <code>Strings.join()</code>. If you plan on building a very long string, the
<code>StringBuffer</code> class can gather the components quite efficiently and convert them to a string only
when needed.</p>

<p>You can also use string interpolation; that will be the subject of my next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[why use Dart?]]></title>
    <link href="http://shailen.github.com/blog/2012/11/12/why-use-dart/"/>
    <updated>2012-11-12T14:19:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/12/why-use-dart</id>
    <content type="html"><![CDATA[<p>Building web applications is hard. Building <em><strong>large</strong></em> web applications is a real challenge. Given this, I am super
excited by the emergence of Dart as a structured web programming language for building applications for the modern web.</p>

<p>I am mostly a Ruby and Python hacker. I have spent the last few years doing web programming and this means that I
have spent a lot of time writing Javascript. I <em>really</em> like coding in Javascript: I like its (mostly) coherent OO/functional
hybrid syntax, I find it expressive and I like to make use of its rich and rapidly evolving ecosystem of frameworks and libraries.</p>

<p>Javascript started off as small language for animating mostly static web pages. As the
web has evolved, Javascript code-bases have become larger (my last project, a Rails 3 app using Backbone, had more Javascript than
Ruby code in it). Large codebases require careful use of code reuse and organization if they are to scale; through the use of &#8216;classes&#8217; and inheritance,
the module and sandbox design patterns, popular MVC frameworks like Backbone and Angular, Javascript developers have sought to bring
more structure to their code.</p>

<p>I very much view Dart as a logical next step in this quest for greater code organization. The Dart project is a serious - and long awaited -
attempt at creating an alternative to writing web applications using Javascript; it is likely to appeal to those who want to
retain the relative ease of current web development, but want a language with more structure than what is available to them today.
Building large web applications has been quite daunting - even heroic - and Dart aims to make the development process easier.
Dart is a &#8220;batteries included&#8221; project (the language comes with libraries, a package manager, an editor, and a VM) and
Dart code executes fast, making it an attractive option for modern web development.</p>

<p>Here are a few salient points about Dart:</p>

<ul>
<li>Dart is open source</li>
<li>it has a syntax that is likely to be familiar to most programmers</li>
<li>it is relatively easy to learn</li>
<li>it compiles to javascript that can be run in any modern browser</li>
<li>it can also be executed directly using a Chromium-based browser (nicknamed <a href="http://www.dartlang.org/dartium/">Dartium</a>) that includes the Dart virtual machine (VM)</li>
<li>it can coexist with javascript through the use of the <a href="http://www.dartlang.org/articles/js-dart-interop/">interop library</a></li>
<li>it runs in the client and the server</li>
<li>it comes with a lightweight <a href="http://www.dartlang.org/docs/editor/">editor</a> that you can use to write and debug applications</li>
<li>Dart programs run <em>fast</em> (many of the people who created Chrome&#8217;s V8 are leading the Dart project)</li>
<li>it offers concurrency through the use of <a href="http://www.dartlang.org/docs/dart-up-and-running/ch03.html#ch03-dartisolate---concurrency-with-isolates">isolates</a></li>
<li>Dart has <strong>optional</strong> static type anotations that can help you organize your code, provide better debug messages in the editor and act as documentation</li>
<li>it comes with batteries included: an <a href="http://www.dartlang.org/docs/dart-up-and-running/ch03.html#ch03-dart-html-using-html5-apis">HTML library</a>
for DOM manipulation, an <a href="http://www.dartlang.org/docs/dart-up-and-running/ch03.html#ch03-dartio---file-and-socket-io-for-command-line-apps">IO library</a>
and a <a href="http://api.dartlang.org/docs/bleeding_edge/unittest.html">unittest library</a></li>
<li>it encourages modular code organization through the use of libraries</li>
<li>it has a package manager (<a href="http://pub.dartlang.org/">pub</a>) so you can integrate code from across the Dart ecosystem</li>
</ul>


<p>Is Dart going to change how we write web applications? While its still early - the language just had its M1 (Milestone 1)
release and is still not at the 1.0 stage - what I see so far is super encouraging.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[starting to blog with octopress]]></title>
    <link href="http://shailen.github.com/blog/2012/11/12/starting-to-blog-with-octopress/"/>
    <updated>2012-11-12T10:27:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/12/starting-to-blog-with-octopress</id>
    <content type="html"><![CDATA[<p>I recently started working at Google. I expect to be writing in this space about Dart, HTML5,
Web Components and whatever else I encounter that might be interesting to anyone else.</p>

<p>This blog is created using Octopress, a framework designed for Jekyll, the static blogging engine
that powers Github Pages. Using Octopress, I can use Markdown, embed code from my filesystem, download and embed gists,
embed code from jsFiddle, and publish easily via a git push.</p>
]]></content>
  </entry>
  
</feed>
