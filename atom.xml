<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shailen Tuli's blog]]></title>
  <link href="http://shailen.github.com/atom.xml" rel="self"/>
  <link href="http://shailen.github.com/"/>
  <updated>2013-01-03T09:04:54-08:00</updated>
  <id>http://shailen.github.com/</id>
  <author>
    <name><![CDATA[Shailen Tuli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A first app with web components using Dart and Web UI library]]></title>
    <link href="http://shailen.github.com/blog/2012/12/31/a-first-app-with-web-components-using-dart/"/>
    <updated>2012-12-31T17:54:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/12/31/a-first-app-with-web-components-using-dart</id>
    <content type="html"><![CDATA[<p>Its time to finally create a simple <code>hello world</code> app using web components and
the dart Web UI library.</p>

<p>There is already a ton of literature out there on why web components are a
tremendously good idea and I won&#8217;t try to do a huge &#8216;sell&#8217; here.  If you are
completely new to web components, I can recommend
<a href="http://blog.sethladd.com/2012/11/your-first-web-component-with-dart.html">this really good introductory blog post by Seth Ladd</a></p>

<p>Or, if you are impatient, here&#8217;s an (almost) tweet sized summary: web components
allow developers to encapsulate their UI elements as easily reusable components.
You can define <code>templates</code> with markup that is inert until activated later,
apply <code>decorators</code> to enhance the look of those templates, create <code>custom
elements</code> and play with the <code>shadow DOM</code>. In this little app, we will not be
tikering with <code>decorators</code> or the <code>shadow DOM</code>; we <em>will</em> be creating
<code>templates</code> and defining our own <code>custom element</code>.</p>

<p>The app is called <code>bookstore</code> and you can find the code at
<code>https://github.com/shailen/bookstore</code>.</p>

<p>Since I am new to web components and the Dart <code>Web UI</code> library, I am going to
keep this simple. In its current iteration, the app will show the user the list
of books in the bookstore and let the user add books to the collection.
The plan is to start with something minimal and over the next few weeks and
months build something a little bit elaborate (add Authors, Publishers, more
attributes to our Book class, reviews, etc) while preserving the <code>one-page</code> feel
of the app.</p>

<h2>Important Files</h2>

<p>There are a few important files in <code>bookstore</code>&#8217;s web directory that are worth
discussing now:</p>

<p><code>lib/models.dart</code> contains code for a <code>Book</code> class</p>

<p><code>web/books.html</code> contains the basic markup for the app</p>

<p><code>web/books.dart</code> contains the Dart code that goes with that markup</p>

<p><code>web/book_component.html</code> contains the markup for our web component</p>

<p><code>web/book_component.dart</code> contains the Dart code for our web component</p>

<p><code>build.dart</code> helps use compile our code so that it can be run</p>

<p>We&#8217;ll discuss each of these files in detail soon.</p>

<h2>lib/models.dart</h2>

<p>We&#8217;re going to be creating books. This file defines a simple <code>Book</code> class. Our
books only have 1 attribute for now, a title (I told you this was simple ;).</p>

<pre><code>library models;

class Book {
  String title;
  Book(this.title);
}
</code></pre>

<h2>web/books.html</h2>

<p>Here is the entirety of teh <code>web/books.html</code> file. Consider this an entry point
into the app:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Books&lt;/title&gt;
    &lt;link rel="components" href="book_component.html"&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Books&lt;/h1&gt;

    &lt;input id="new-book" type="text" placeholder="add another title"&gt;
    &lt;button on-click="createNewBook()"&gt;Add Book&lt;/button&gt;

    &lt;ul id="books"&gt;
      &lt;template iterate="book in books"&gt;
        &lt;x-book-item book="{{ book }}"&gt;&lt;/x-book-item&gt;
      &lt;/template&gt;
    &lt;/ul&gt;

    &lt;!-- this is the non web-component way to create the &lt;li&gt;s
    &lt;ul&gt;
      &lt;template iterate='book in books'&gt;
        &lt;li&gt;{{ book.title }}&lt;/li&gt;
      &lt;/template&gt;
    &lt;/ul&gt;
    --&gt;

    &lt;script type="application/dart" src="books.dart"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="https://dart.googlecode.com/svn/branches/bleeding_edge/dart/client/dart.js"&gt;&lt;/script&gt;

  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>A few things to notice here:</p>

<pre><code>&lt;link rel="components" href="book_component.html"&gt;
</code></pre>

<p>is the way you access the contents of our web component from this file.</p>

<p>We create an <code>input</code> where the user enters the name of a book and an
accompanying <code>button</code>:</p>

<pre><code>&lt;input id="new-book" type="text" placeholder="add another title"&gt;
&lt;button on-click="createNewBook()"&gt;Add Book&lt;/button&gt;
</code></pre>

<p>Notice the <code>on-click</code>? That is the way we inline an event listener: when the
button is clicked, <code>createNewBook()</code> fires (we&#8217;ll get to that function soon)</p>

<p>And finally the code that actually deals with the web component:</p>

<pre><code>&lt;ul id="books"&gt;
  &lt;template iterate="book in books"&gt;
    &lt;x-book-item book="{{ book }}"&gt;&lt;/x-book-item&gt;
  &lt;/template&gt;
&lt;/ul&gt;
</code></pre>

<p>A few things to note here. We define a <code>&lt;template&gt;</code> tag; we loop over our
collection of books (stored in a variable <code>books</code> in <code>web/books.dart</code>); we
instantiate our web component (<code>&lt;x-book-item&gt;&lt;/x-book-item&gt;</code>) and we pass each
<code>book</code> in the loop as a template variable when we instantiate the web component.</p>

<p>There&#8217;s a lot going on here. Make sure you understand the above paragraph!</p>

<h2>web/books.dart</h2>

<p><code>web/books.html</code> has a link to a Dart file at the bottom:</p>

<pre><code>&lt;script type="application/dart" src="books.dart"&gt;&lt;/script&gt;
</code></pre>

<p>And here is what <code>books.dart</code> looks like:</p>

<pre><code>import 'dart:html';
import 'package:bookstore/models.dart';

List&lt;Book&gt; books = [];

// binding created auto-magically!
void createNewBook() {
  var input = query("#new-book");
  books.add(new Book(input.value));
  input.value = "";
}

main() {
  // create some data so the page doesn't look empty
  ["War and Peace", "The Idiot", "Crime and Punishment"].forEach((title) {
    books.add(new Book(title));
  });
} 
</code></pre>

<p>It is pretty straightforward stuff: we import <code>models.dart</code>, the file that
contains the <code>Book</code> class; we create a <code>books</code> variable to store our collection.
We define <code>createNewBook()</code> to add a book to <code>books</code>, and we define a <code>main()</code>
function.</p>

<p>This Dart file MUST contain a <code>main()</code>, even an empty one will do.  In our case,
we will add a few books to our <code>books</code> collection, so that there is some data to
display.</p>

<h2>web/book_component.html</h2>

<p>This contains the code that defines our web component:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;body&gt;
    &lt;element name="x-book-item" constructor="BookComponent" extends="li"&gt;
      &lt;template&gt; 
        &lt;li&gt;{{ book.title }}&lt;/li&gt;
      &lt;/template&gt;

      &lt;script type="application/dart" src="book_component.dart"&gt;&lt;/script&gt;
    &lt;/element&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>A few things to understand here:  we create a custom <code>&lt;element&gt;</code>; we give it a
name, <code>x-book-item</code> (all element names must begin with an <code>x-</code>); we call a
constructor, <code>BookComponent</code> (defined in <code>web/book_componenet.dart</code>, we&#8217;ll get
to that file shortly) and we declare that our custom element <code>extends</code> and <code>li</code>.</p>

<p>Inside our <code>&lt;element&gt;</code>, we create a <code>&lt;template&gt;</code> that stores the <code>&lt;li&gt;</code> that
contains a book&#8217;s title.</p>

<p>And finally, we link to the accompanying Dart file, <code>book_component.dart</code>.</p>

<h2>web/book_component.dart</h2>

<p>Here we get to define our <code>BookComponent</code> class (remember that we declared that
the <code>&lt;element&gt;</code> we created in <code>book_componenet.html</code> use this constructor?):</p>

<pre><code>import 'package:web_ui/web_ui.dart';
import 'package:bookstore/models.dart';

class BookComponent extends WebComponent {
  Book book;
}
</code></pre>

<p><code>BookComponent</code> extends <code>WebComponent</code> (this is the only option for subclassing
at the moment; that may change in the future) and contains a <code>book</code> attribute
(this can be set using the <code>book =</code> syntax when the web component is
initialized). That&#8217;s it.</p>

<h2>build.dart</h2>

<pre><code>import 'package:web_ui/component_build.dart';
import 'dart:io';

void main() {
  build(new Options().arguments, ['web/books.html']);
}
</code></pre>

<p>To actually build the project, <code>run</code> <code>build.dart</code> (this will create an <code>out</code>
directory); then <code>run</code>  <code>web/out/books.html</code>.</p>

<h2>pubspec.yaml</h2>

<p>The app only has a single <code>pub</code> dependency, <code>web_ui</code>:</p>

<pre><code>name: bookstore
description: A sample app to demonstrate the use of a web component

dependencies:
    web_ui
</code></pre>

<h2>Summary</h2>

<p>This is a fair bit of code for a simple hello-world caliber app. Is all this web
component stuff really necessary, or is it overkill?</p>

<p>We&#8217;re just starting out, so this may seem like too much of a production given
what the needs of our app. But we have already established a
pretty important development principle: our UI elements can be nicely
ENCAPSULATED (!) and then used as necessary. We have taken the first baby steps
towards creating a widget that displays the content of each book. As our
application grows in complexity, our &#8216;widget&#8217; will become more elaborate and we
will want to use it in all sorts of different contexts in our app. A composable,
encapsulated UI component - a web component - that can be instantiated with
varying arguments will then prove to be quite useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setting up continuous integration for dart using drone.io]]></title>
    <link href="http://shailen.github.com/blog/2012/12/31/setting-up-continuous-integration-for-dart-using-drone-io/"/>
    <updated>2012-12-31T14:58:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/12/31/setting-up-continuous-integration-for-dart-using-drone-io</id>
    <content type="html"><![CDATA[<h2>Creating a dummy project</h2>

<p>I created a very simple project, <code>droneDemo</code>, to show how to set up Continuous Integration
on drone.io for Dart projects. The code can be found <a href="https://github.com/shailen/droneDemo">here on Github</a>.</p>

<p><code>droneDemo</code> defines just two methods, <code>add()</code> and <code>multiply()</code>. These
can be found in <code>lib/</code>. Tests for these methods can be found in <code>test/</code>. The
<code>pubspec.yaml</code> file needs to declare a <code>unittest</code> dependency for these tests to
work.</p>

<p>This is about as simple a project as you can have and there is little need for
explanation. But it is worth delving into 2 points:</p>

<p>1) You should add <code>packages</code> to your <code>.gitignore</code>. This is to tell <code>git</code> not to
commit the <code>symlinks</code> created by <code>pub</code> to version control. These symlinks are
meaningful in the context of your filesystem but will trip drone.io.</p>

<p>If you already started your demo project and ended up with the symlinks, remove
them.</p>

<p>2) drone.io needs a way to run all your tests. So far, Dart does not ship with a
test runner, so you&#8217;ll have to cobble together something yourself.</p>

<p>Here&#8217;s what I did: my tests live in 2 different files, <code>test/add_test.dart</code> and
<code>test/multiply_test.dart</code>. I declared both files as libraries (see the <code>library add_test;</code>
and the <code>library multiply_test;</code> declaration at the top of each file) and
<code>import</code>ed  components from them into <code>test/test_runner.dart</code>.</p>

<p>   import &#8220;package:unittest/unittest.dart&#8221;;
   import &#8220;add_test.dart&#8221; as add_test;
   import &#8220;multiply_test.dart&#8221; as multiply_test;</p>

<p>   void main() {</p>

<pre><code> add_test.main();
 multiply_test.main();
</code></pre>

<p>   }</p>

<p>So, calling <code>dart test/add_test.dart</code> or <code>dart test/multiply_test.dart</code> runs
only one test; calling <code>dart/test_runner.dart</code> runs both the tests.</p>

<p>With this out of the way, we can shift our attention to drone.io.</p>

<h2>Drone.io: Basic Setup</h2>

<p>Set up account at <code>https://drone.io/signup</code>.</p>

<p>On your <code>dashboard</code>, click on the <code>New Project</code> on the top right.</p>

<p>Pick <code>Dart</code> as the project language.</p>

<p>Pick <code>Git</code> as your Repository type.</p>

<p>Add the project name (I added <code>droneDemo</code>).</p>

<p>Add the Repository URL (mine was <code>https://github.com/shailen/droneDemo.git</code>).
Make sure your github repo is set to use the <code>http</code> method, not the <code>ssh</code> method.</p>

<p>Press <code>Create</code>.</p>

<h2>Configuring your Build</h2>

<p>After you press <code>Create</code>, you will be redirected to the <code>script/config</code> page.
Here, you will have to tell drone.io how to run your tests.</p>

<p>In the <code>Commands</code> section, type the following:</p>

<pre><code>pub install
dart test/test_runner.dart
</code></pre>

<p>Remember <code>test/test_runner.dart</code> was our consolidating test runner? This is
where the trouble we went through sewing our tests together pays off.</p>

<p>Press <code>Save</code> and when you get the message that tells you the build was
successfully saved, press the blue <code>Build Now</code> button at the top.</p>

<p>A popup will appear with a <code>Build Output</code> link.  Click that link.</p>

<p>Voila! You are swimming in a sea of green!</p>

<p><img src="http://shailen.github.com/images/drone_io_success.png"></p>

<p>My build output can be seen at: <code>https://drone.io/shailen/droneDemo/1</code></p>

<h2>Setting up Continuous Build</h2>

<p>Click on <code>settings</code> for your <code>drone.io</code> project</p>

<p>Click on <code>General</code> in the left column. You will see a couple of links under <code>Build Hooks</code>. Copy the top one.</p>

<p>Now, go back to your project on <code>github</code>. Mine is at <code>https://github.com/shailen/droneDemo</code>.</p>

<p>Click on <code>Settings</code>.</p>

<p>Click on <code>Service Hooks</code> (left column).</p>

<p>Click on the <code>WebHook Urls</code> link at the top.</p>

<p>Paste the <code>build hook</code> you had copied earlier in the text input box provided
and press <code>Update Settings</code>.</p>

<p>From now on, every time you commit to your project on github, drone.io will run
all your tests.</p>

<p>I changed one of my tests so that it was failing and pushed to github. No
surprise, the build now show <code>Failed</code> (<code>https://drone.io/shailen/droneDemo</code>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Randomness in Dart: nextBool(), nextInt(), and nextDouble()]]></title>
    <link href="http://shailen.github.com/blog/2012/12/10/random-dart-nextbool-nextint-and-nextdouble/"/>
    <updated>2012-12-10T14:36:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/12/10/random-dart-nextbool-nextint-and-nextdouble</id>
    <content type="html"><![CDATA[<p>The <code>Random</code> class in <code>dart:math</code> contains 3 methods, <code>nextBool()</code>, <code>nextInt()</code>
and <code>nextDouble()</code>. To use <code>Random</code>, you will need a <code>import 'dart:math</code> in your
code.</p>

<h2>nextBool()</h2>

<p>simply returns <code>true</code> or <code>false</code> at random. Here is a little
function, <code>randUpcase()</code> that demonstrates <code>randBool()</code> use. <code>randUpcase()</code>
takes a string as an argument, and converts each character in the string to
uppercase if random.nextBool() is <code>true</code> and leaves it untouched if it is
<code>false</code>.</p>

<pre><code>String randUpcase(String s) {
  Random random = new Random();
  List&lt;String&gt; chars = s.split('');
  return Strings.join(chars.map(
    (char) =&gt; random.nextBool() ? char.toUpperCase() : char), '');
}
</code></pre>

<p>And here is some sample usage:</p>

<pre><code>var herbs = ["parsley", "sage", "rosemary", "thyme"];
print(herbs.map((herb) =&gt; randUpcase(herb))); // [pARslEY, SaGE, roSEMaRY, tHYME]
</code></pre>

<h2>nextInt()</h2>

<p>takes a <code>max</code> int argument and generates a positive int between 0 (inclusive) and <code>max</code>, exclusive.</p>

<p>To generate a random int within a range, you can do something like this:</p>

<pre><code>int randRange(int min, int max) {
  var random = new Random();
  return min + random.nextInt(max - min);
}
</code></pre>

<p>You can also use <code>nextInt()</code> to randomly shuffle a list (using the familiar
Fisher-Yates-Knuth algorithm):</p>

<pre><code>List shuffle(List items) {
  var random = new Random();
  for (var i = items.length - 1; i &gt; 0; i--) {
    var j = random.nextInt(i);
    var temp = items[i];
    items[i] = items[j];
    items[j] = temp;
  }
  return items;
}
</code></pre>

<p>You can use it like this:</p>

<pre><code>var items = ["fee", "fi", "fo", "fum", "smell", "Englishman"];
print(shuffle(items)); // [fo, smell, fum, Englishman, fee, fi]
</code></pre>

<h2>nextDouble()</h2>

<p>generates a random floating point value distributed between 0.0
and 1.0. Here is a little function to simulate a biased coin toss; the <code>percent</code>
argument alters the percent a coin will return heads (&#8216;H&#8217;). This is pretty much cribbed from
<a href="http://stackoverflow.com/questions/477237/how-do-i-simulate-flip-of-biased-coin-in-python">this discussion on Stack Overflow</a>:</p>

<pre><code>String flip(num percent) {
  Random random = new Random();
  return random.nextDouble() &lt; percent ? 'H' : 'T';
}
</code></pre>

<p>And here is some code to test that it works:</p>

<pre><code>int n = 1000;
int heads = 0;
for (var i = 0; i &lt; 1000; i++) {
  if(flip(.20) == "H") heads++;
}
print(heads/n); // 0.209, 0.196, etc.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Only Some of Your Dart Tests with filterTests()]]></title>
    <link href="http://shailen.github.com/blog/2012/12/07/running-only-some-of-your-tests/"/>
    <updated>2012-12-07T10:00:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/12/07/running-only-some-of-your-tests</id>
    <content type="html"><![CDATA[<p>The Dart <code>unittest</code> library allows you to run just a single test; to do so,
just change the call for that test form <code>test()</code> to <code>solo_test()</code>.</p>

<p>Another way to run a subset of your tests is by using the <code>filterTests()</code>
function. <code>filterTests()</code> takes a String or a RegExp argument and matches
it against each test description; if the description matches, the test
runs, otherwise, it doesn&#8217;t.</p>

<p>Before you use <code>filterTests()</code>, you need to disable the automatic running of
tests (set <code>autoStart</code> to false) and ensure that the your configuration is
initialized.</p>

<p>You can do this by creating a custom configuration:</p>

<pre><code>import "package:unittest/unittest.dart";
import "package:args/args.dart";

class FilterTests extends Configuration {
  get autoStart =&gt; false;
}

void useFilteredTests() {
  configure(new FilterTests());
  ensureInitialized();  
}
</code></pre>

<p>Then, you can call <code>useFilteredTests()</code> in your <code>main()</code>, define all your
tests, call <code>filteredTests()</code> with a string or regexp argument and run your
tests using <code>runTests()</code>:</p>

<pre><code>void main() {
  useFilteredTests();

  // your tests go here

  filterTests(some_string_or_regexp);
  runTests();
}
</code></pre>

<p>Here is a little working example:</p>

<pre><code>void main() {
  useFilteredTests();

  test("one test", () {
    expect(1, equals(1));
  }); 

  test("another test", () {
    expect(2, equals(2));
  });

  test("and another", () {
    expect(3, equals(3));
  });

  filterTests('test');
  // filterTests('another');

  runTests();
}
</code></pre>

<p><code>filterTests('test')</code> will run the first 2 tests; <code>filterTests('another')</code> will
run the last 2 tests.</p>

<p>It is easy to make this <em>considerably</em> more useful by getting the argument to
<code>filterTests()</code> from the command line. That way, you can control what subset of
tests to run without having to change the code in your test suite. Here is a
slightly expanded version of the same example:</p>

<pre><code>void main() {
  useFilteredTests();
  ArgParser argParser = new ArgParser();
  Options options = new Options();
  ArgResults results = argParser.parse(options.arguments);
  List&lt;String&gt; args = results.rest; // get the args from the command line

  test("one test", (){
    expect(1, equals(1));
  }); 

  test("another test", (){
    expect(2, equals(2));
  });

  test("and another", (){
    expect(3, equals(3));
  });

  // we add a group() to show how we can easily run just the tests
  // contained in it
  group("foo", () {
    test("this", (){
      expect('bar', equals('bar'));
    }); 

    test("that", (){
      expect('baz', equals('baz'));
    });
  });

  if (!args.isEmpty) {
    filterTests(args[0]);
  }
  runTests();
}
</code></pre>

<p>You can run the tests from the command line by using the</p>

<pre><code>`dart name_of_file.dart [keyword]`
</code></pre>

<p>syntax. If the keyword is <code>this</code>, only one test will run. If the keyword is
<code>foo</code>, all tests in the <code>group()</code> with the description of <code>foo</code> will run.
If you do not provide a keyword, all 5 tests will run.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dart: Customizing Unittest Run Output]]></title>
    <link href="http://shailen.github.com/blog/2012/12/06/customizing-the-look-of-your-test-run-output/"/>
    <updated>2012-12-06T14:57:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/12/06/customizing-the-look-of-your-test-run-output</id>
    <content type="html"><![CDATA[<p><code>unittest</code> provides a default configuration that determines the
content and appearance of the output from running your tests. In addition, the
package provides fancier configurations for running tests in the browser, or on
the VM.</p>

<p>But suppose you want to customize the test run output? Maybe you are an ardent
Test Driven Development (TDD) hacker, and want to have your test output be
in sync with TDD Red-Green-Refactor workflow (passing tests in green, failing
tests in red); maybe you want a green &#8220;.&#8221; printed to the command line for every
passing test (you don&#8217;t care for all the &#8220;PASS: &#8230;&#8221; messages that the default
configuration gives you), and a red &#8216;F&#8217; printed for every failing test, with
more details about the failures in the summary. You also want the ouput to
list the file where the tests being run are located and you want to know how
long it takes to run all your tests.</p>

<p>To do all this, you need to extend the default <code>Configuration</code> class (see
<code>unittest/src/config.dart</code>) and customize your environment by passing an
instance of that class to <code>configure()</code> as an argument.
A <code>Configuration</code> has several functions that get called at different stages of
the testing process:</p>

<pre><code>onInit(), when the test framework is initialized
onStart(), before the first test is run
onTestStart(), when a test starts running
onTestResult(), upon the completion of each test
onDone(), when all tests are done
</code></pre>

<p>and you can override all of these.</p>

<p>Let&#8217;s extend <code>Configuration</code> and begin by adding a few constants to help with the
presentation:</p>

<pre><code>class ColorTestRunner extends Configuration {
  const String NEUTRAL_COLOR = "\u001b[33;34m"; // blue
  const String PASS_COLOR = "\u001b[33;32m";    // green
  const String FAIL_COLOR = "\u001b[33;31m";    // red
  const String RESET_COLOR = "\u001b[33;0m";

  ...
}
</code></pre>

<p>We will prefix our failing output with <code>FAIL_COLOR</code>, passing output
with <code>PASS_COLOR</code> and use <code>RESET_COLOR</code> to revert back to the user&#8217;s settings.
We will use <code>NEUTRAL_COLOR</code> to print a small introduction and the summary.</p>

<p>We are now ready to start filling out our <code>ColorTestRunner</code> class. The
<code>onInit()</code> of <code>Configuration</code> is empty; let&#8217;s add a little introduction that
prints the name of the file containing the tests:</p>

<pre><code>void onInit() { 
  print(NEUTRAL_COLOR);
  Options options = new Options();  
  print("Running tests for ${options.script}");
  print(RESET_COLOR);
}
</code></pre>

<p>Now let&#8217;s move on to <code>onStart()</code>. This is called after <code>onInit()</code> but before
the first test is run. In the default <code>Configuration</code>, this prints the
<code>unittest-suite-wait-for-done</code> message. We pushed our custom message in
the <code>onInit()</code>, so we don&#8217;t need another message here. But this would be a
good place to start running the stopwatch for timing our tests:</p>

<pre><code>Stopwatch stopwatch = new Stopwatch();
void onStart() =&gt; stopwatch.start();
</code></pre>

<p><code>Configuration</code> defines the twin <code>onTestStart()</code> and <code>onTestResult()</code> functions
that basically define which test is currently being run:</p>

<pre><code>void onTestStart(TestCase testCase) {
  currentTestCase = testCase;
}

void onTestResult(TestCase testCase) {
  currentTestCase = null;
}
</code></pre>

<p>We don&#8217;t need to tinker with <code>onTestRun()</code>, but we&#8217;ll override <code>onTestResult()</code> to
output the green <code>.</code> or red <code>F</code> for passing and failing tests, respectively:</p>

<pre><code>void onTestResult(TestCase testCase) {
  var color = testCase.result == PASS ? PASS_COLOR : FAIL_COLOR;
  stdout.writeString("${color}${testCase.result == PASS ? '.' : 'F'}$RESET_COLOR");
  currentTestCase = null;
}
</code></pre>

<p>The <code>onDone()</code> function is where <code>Configuration</code> does the heavy lifting: it
outputs the status and description of each test as well as the error messages
and stack traces for failing tests. Then, it provides summary informtion for
the test run. We&#8217;ll just skip over the passing tests and color-code our
summary (it will be red if even a single test fails). Then, we will output
the total time taken for the tests to run (remember the stopwatch we started in
<code>onStart()</code>?.</p>

<p>With a little bit of refactoring, and some additional formatting added to the
output, here is what the script looks like:</p>

<pre><code>library colorTestRunner;

import 'package:unittest/unittest.dart';
import 'dart:io';

/// Overrides default Configuration to provide colorful command line
/// output when tests are run. Loosely based on RSpec (https://www.relishapp.com/rspec).
/// Outputs green (passing) "." and red (failing) "F" characters as tests are running. 
/// If there are failing tests, provides detailed error report in red.
/// Provides a short summary.
class ColorTestRunner extends Configuration {
  const String NEUTRAL_COLOR = "\u001b[33;34m"; // blue
  const String PASS_COLOR = "\u001b[33;32m";    // green
  const String FAIL_COLOR = "\u001b[33;31m";    // red
  const String RESET_COLOR = "\u001b[33;0m";
  const int BORDER_LENGTH = 80;

  Stopwatch stopwatch = new Stopwatch();

  void onInit() =&gt; _printResultHeader();
  void onStart() =&gt; stopwatch.start();

  void onTestResult(TestCase testCase) {
    var color = testCase.result == PASS ? PASS_COLOR : FAIL_COLOR;
    _colorPrint(color, testCase);
    currentTestCase = null;
  }

  void onDone(int passed, int failed, int errors, List&lt;TestCase&gt; testCases,
              String uncaughtError) {
    stopwatch.stop();

    _printFailingTestInfo(testCases);
    _printSummary(passed, failed, errors, uncaughtError);
    print("${NEUTRAL_COLOR}Total time = ${stopwatch.elapsedMilliseconds / 1000} seconds.$RESET_COLOR");
  }

  void _printFailingTestInfo(List&lt;TestCase&gt; testCases) {
    print(FAIL_COLOR);
    for (var testCase in testCases) {
      if (testCase.result != PASS) {
        print("${testCase.result.toUpperCase()}: ${testCase.description}");

        if (testCase.message != '') {
          print(testCase.message);
        }

        if (testCase.stackTrace != null &amp;&amp; testCase.stackTrace != '') {
          print(testCase.stackTrace);
        }

        print(_repeatString(".", BORDER_LENGTH));
      }
    }
    print(RESET_COLOR);
  }

  void _printSummary(int passed, int failed, int errors, String uncaughtError) {
    if (_passed(failed, errors, uncaughtError)) {
      print(PASS_COLOR); 
      print("All $passed tests passed.");
    } else {
      print(FAIL_COLOR); 
      if (_noTestsFound(passed, failed, errors)) {
        print('No tests found.');
      } else if (uncaughtError != null) {
        print("Top-level uncaught error: $uncaughtError");
      } else {
        print("$passed PASSED, $failed FAILED, $errors ERRORS.");
      }
    }
  }

  bool _noTestsFound(int passed, int failed, int errors) {
    return passed == 0 &amp;&amp; failed == 0 &amp;&amp; errors == 0;
  }

  bool _passed(int failed, int errors, String uncaughtError) {
    return failed == 0 &amp;&amp; errors == 0 &amp;&amp; uncaughtError == null;
  }

  void _printResultHeader() {
    print(NEUTRAL_COLOR);
    Options options = new Options();  
    String description = "Running tests for ${options.script}";
    String frame = _repeatString("=", description.length);
    print(frame);
    print(description);
    print(frame);
    print(RESET_COLOR);
  }

  String _repeatString(String str, int times) {
    StringBuffer sb = new StringBuffer();
    for (var i = 0; i &lt; times; i++) {
      sb.add(str);  
    }
    return sb.toString();
  }

  void _colorPrint(String color, TestCase testCase) {
    stdout.writeString("${color}${testCase.result == PASS ? '.' : 'F'}$RESET_COLOR");
  }
}

/// The function that should be called right before the tests.
void useColorTestRunner() {
  configure(new ColorTestRunner());
}
</code></pre>

<p>To use this script, call the <code>useColorTestRunner()</code> just before where you have
defined your tests. Here is a simple use case:</p>

<pre><code>import 'package:unittest/unittest.dart';
import '&lt;path to&gt;/color_test_runner.dart';

num factorial(num n) {
  if (n &lt; 2) {
    return 1;
  } else {
    return n * factorial(n - 1);
  }
}

void main() {
  useColorTestRunner(); // we're using our own configuration

  test("when n is 0", () {   
    expect(factorial(0), equals(1));
  });

  test("when n is 1", () {
    expect(factorial(1), equals(1));
  });

  test("when n is &gt; 1", () {
    expect(factorial(5), equals(120));
  });
}
</code></pre>

<p>Call this from the command line: <code>dart &lt;test file&gt;.dart</code> and your output should
look like this:</p>

<p><img src="http://shailen.github.com/images/passing_tests.png"></p>

<p>Everything is green. Great! But perhaps you were in a hurry and got your <code>0</code> and
<code>1</code> mixed up in the first test:</p>

<pre><code>test("when n is 0", () {   
  expect(factorial(1), equals(0)); // oops....!
});
</code></pre>

<p>If you run the tests now, you&#8217;ll see:</p>

<p><img src="images/failing_tests.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using setUp() in your Dart tests]]></title>
    <link href="http://shailen.github.com/blog/2012/11/21/using-setup-in-your-dart-tests/"/>
    <updated>2012-11-21T22:47:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/21/using-setup-in-your-dart-tests</id>
    <content type="html"><![CDATA[<p>Take this minimal <code>Point</code> class:</p>

<pre><code>class Point {
  num x;
  num y;
  Point(this.x, this.y);

  num distanceTo(Point other) {
    ...
  }
}
</code></pre>

<p>As you write tests for <code>Point</code>, you will probably want to set up one or more <code>point</code> objects that you can access in each
test. Something like:</p>

<pre><code>void main() {
  group("Point", (){
    setUp((){
      Point p1 = new Point(3, 4);
      Point p2 = new Point(3, 5);
    });
    test("distanceTo()", (){
      expect(p1.distanceTo(p2), equals(...));
    });
  });
}
</code></pre>

<p>Do this and the Editor starts complaining that it cannot make sense of <code>p1</code> or <code>p2</code>. Why?  Remember, <code>setUp()</code> simply calls the function passed
to it before each <code>test()</code> and our code defining <code>p1</code> and <code>p2</code> will therefore run every time. But (and this seems like a Captain Obvious mement) because <code>p1</code> and <code>p2</code>
are local to function called by <code>setUp()</code>, they cannot be accessed from outside that function.  But it takes only very small changes to take care of the access problem:</p>

<pre><code>void main() {
  group("Point", (){
    Point p1;
    Point p2;
    setUp((){
      p1 = new Point(3, 4);
      p2 = new Point(3, 5);
    });
    test("distanceTo()", (){
      expect(p1.distanceTo(p2), equals(34));
    });
  });
});
</code></pre>

<p>Now, the function called by <code>setUp()</code> assigns a value to the already existing <code>p1</code> and <code>p2</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grouping dart tests]]></title>
    <link href="http://shailen.github.com/blog/2012/11/20/grouping-dart-tests/"/>
    <updated>2012-11-20T16:02:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/20/grouping-dart-tests</id>
    <content type="html"><![CDATA[<p>Yesterday, we create a simple Dart package with a <code>range</code> library and wrote a couple of tests. Let&#8217;s pick up
where we left off and add more tests.</p>

<p>We should test that the list returned by <code>range()</code> does not include <code>stop</code> and that an ArgumentError is raised when start >= stop.
Modify your <code>range_test.dart</code> file so that it contains the new tests:</p>

<pre><code>import 'package:unittest/unittest.dart';
import 'package:range/range.dart';

void main() {
  test("range() produces a list that starts at `start`", () {
    expect(range(0, 4)[0], equals(0));
  });

  test ("range() produces a list that stops before `stop`", () {
    expect(range(0, 4).last, equals(3));
  });

  test("range() throws an exception when start &gt; stop", () {
    expect(() =&gt; range(5, 2), throwsA(new isInstanceOf&lt;ArgumentError&gt;()));
  });

  test("range() throws an exception when start == stop", () {
    expect(() =&gt; range(5, 5), throwsA(new isInstanceOf&lt;ArgumentError&gt;()));
  });
}
</code></pre>

<p>Run the tests again. They should all pass. We have doubled our test coverage!</p>

<p>Now, what we have here works fine, but we can improve things a bit. Notice the repetition in the string arguments we pass to
each <code>test()</code> (&#8220;range() produces &#8230;&#8221;, &#8220;range() throws &#8230;&#8221;, etc.)? We should clean that up. Also, we have 4 tests that fall into
2 natural groups: the first two call <code>range()</code> with valid arguments and the last two with invalid arguments. We should arrange
our tests more clearly to reflect this grouping. Finally, there are no tests for the optional <code>step</code> argument. We should add those.
Rewriting our tests, we get:</p>

<pre><code>import 'package:unittest/unittest.dart';
import 'package:range/range.dart';

void main() {
  group("range()", () {
    group("produces a list that", () {
      test("starts at `start`", () {
        expect(range(0, 4)[0], equals(0));
      });

      test ("stops before `stop`", () {
        expect(range(0, 4).last, equals(3));
      });

      test("has consecutive values if no `step` is given", () {
        expect(range(1, 6), equals([1, 2, 3, 4, 5]));
      });

      test("has non-consecutive values with `step` &gt; 1", () {
        expect(range(1, 6, 2), equals([1, 3, 5]));
      });
    });

    group("throws an exception when", () {
      test("start &gt; stop", () {
        expect(() =&gt; range(5, 2), throwsA(new isInstanceOf&lt;ArgumentError&gt;()));
      });

      test("start == stop", () {
        expect(() =&gt; range(5, 5), throwsA(new isInstanceOf&lt;ArgumentError&gt;()));
      });
    });
  });
}
</code></pre>

<p>Much better. We use nested <code>group()</code>s to organize our tests; we pass descriptive string args to each <code>group()</code> to make our intent clear; we get rid
of a lot of repetition.</p>

<p>Let&#8217;s run our tests again:</p>

<pre><code>unittest-suite-wait-for-done
PASS: range() produces a list that starts at `start`
PASS: range() produces a list that stops before `stop`
PASS: range() produces a list that has consecutive values if no `step` is given
PASS: range() produces a list that has non-consecutive values with `step` &gt; 1
PASS: range() throws an exception when start &gt; stop
PASS: range() throws an exception when start == stop

All 6 tests passed.
unittest-suite-success
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[writing unit tests for pub packages]]></title>
    <link href="http://shailen.github.com/blog/2012/11/19/writing-unit-tests-for-pub-packages/"/>
    <updated>2012-11-19T11:18:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/19/writing-unit-tests-for-pub-packages</id>
    <content type="html"><![CDATA[<p>In this post I&#8217;m going to show you how to create a really simple Dart package. Because we would never want to
write a package without testing the code in it, I will also introduce you to Dart&#8217;s quite excellent <code>unittest</code> framework.</p>

<p><a href="http://pub.dartlang.org/">Pub</a> is Dart&#8217;s package mananger. After working through this post, you will be able to bundle your Dart libraries
and share them with others on Pub.</p>

<p>For the purposes of this post, our package will be very basic and consist of a singe <code>range()</code> function modeled roughly on the Python
builtin function with the same name.</p>

<p><code>range()</code> will have the following signature:</p>

<pre><code>List&lt;num&gt; range(num start, num stop, [num step = 1]);
</code></pre>

<p>It will return a list of ints between <code>start</code> and <code>stop</code> separated by <code>step</code> steps. Here is some sample usage:</p>

<pre><code>range(0, 4);    // [0, 1, 2, 3]
range(1, 6, 2); // [1, 3, 5]
</code></pre>

<p>Let&#8217;s get started.</p>

<h2>Create a simple package</h2>

<p>Open up Dart Editor and create a <code>New application</code> called <code>range</code>. For this example, we will not be creating a web project, so uncheck <code>Generate
content for a basic web app</code> when you create the application. But do make sure that <code>Add Pub support</code> is checked.</p>

<p>Delete the automatically created <code>bin</code> directory. We won&#8217;t be needing it.</p>

<p>Create a top level <code>lib</code> directory. Inside <code>lib</code>, create a <code>range.dart</code> file: the code for <code>range()</code> will go in here.</p>

<p>There are other directories and files that you should create - a README, a LICENSE, a <code>doc/</code> folder for documentation,
an <code>example/</code> folder with examples showing usage of your package, etc. - but our focus here is on how to write unittests, so we&#8217;ll skip over those
files and directories for now. To know what else you should be doing to make this a <em>respectable</em> package, see this excellent writeup
on <a href="http://pub.dartlang.org/doc/package-layout.html">package layout conventions</a> on the <a href="http://pub.dartlang.org/doc/package-layout.html">pub site</a>.</p>

<h2>Add unittest package to your library</h2>

<p>With the basic files created for our package, let&#8217;s open up <code>pubspec.yaml</code> and add some metadata for our pub
package (read more about <a href="http://pub.dartlang.org/doc/pubspec.html">Pubspec format</a>). Every package <strong>must</strong> contain a <code>pubspec.yaml</code>; in fact, it
is this file that makes it a package.</p>

<p>Add a simple description for the package and specify its only dependency, the unittest package. Your <code>pubspec.yaml</code> should look like this:</p>

<pre><code>name:  range
description:  An approximate implementation of the range() function in Python.

dependencies:
  unittest: { sdk: unittest }
</code></pre>

<p>Run <code>pub install</code> (you can find it under <code>Tools</code> in the Editor). This will create a <code>pubspec.lock</code> file and a bunch of
symlinks that are all necessary for the plumbing to work correctly; fortunately, Dart handles all these details for us.</p>

<h2>Write some code</h2>

<p>Let&#8217;s create a bare-bones implementation for <code>range()</code>.  Add the following code to <code>lib/range.dart</code>:</p>

<pre><code>library range; 

List&lt;int&gt; range(int start, int stop, [int step=1]) {
  if (start &gt;= stop) {
    throw new ArgumentError("start must be less than stop");
  }

  List&lt;int&gt; list = [];

  for (var i = start; i &lt; stop; i+= step) {
    list.add(i);
  }

  return list;
}
</code></pre>

<h2>Write some tests</h2>

<p>Create a top level <code>test</code> directory. Inside <code>test</code>, create a <code>range_test.dart</code> file: your tests will go in here.
But before we can write our tests, <code>test/range_test.dart</code> needs access to the <code>unittest</code> package and the <code>range</code> library. At the top of
<code>range_test.dart</code>, add these <code>import</code> statements:</p>

<pre><code>import 'package:unittest/unittest.dart';
import 'package:range/range.dart';
</code></pre>

<p>Now add a couple of tests (we&#8217;ll need many more to really test <code>range()</code>, but these will do for now). Your <code>range_test.dart</code> should look like this:</p>

<pre><code>import 'package:unittest/unittest.dart';
import 'package:range/range.dart';

void main() {
  test("range() produces a list that starts at `start`", () {
    expect(range(0, 4)[0], equals(0));
  });

  test("range() throws an exception when start &gt; stop", () {
    expect(() =&gt; range(5, 2), throwsA(new isInstanceOf&lt;ArgumentError&gt;()));
  });      
}
</code></pre>

<p>An individual test goes inside <code>test()</code>. <code>expect()</code> evaluates the equality between the expected and actual values. A string
argument to <code>test()</code> describes the purpose of the test.</p>

<p>Run the tests (press the green arrow in the Editor; or, press <code>CMD-R</code> if you are using a Mac; or, type <code>dart test/range_test.dart</code> on the command line).
Watch the output produced by the editor:</p>

<pre><code>unittest-suite-wait-for-done
PASS: range() produces a list that starts at `start`
PASS: range() throws an exception when start &gt; stop

All 2 tests passed.
unittest-suite-success
</code></pre>

<h2>Summary</h2>

<p>So, we managed to create a minimal Dart package, made it (barely) good enough to put on <code>pub</code>, and wrote a few tests.  This is a good start, of course,
but we have only scratched the surface of how we should test our packages. For a very thorough explanation of how the <code>unittest</code> framework works
in Dart, I would highly recommend a careful reading of <a href="http://www.dartlang.org/articles/dart-unit-tests/">Unit Testing with Dart</a> by Google engineer
Graham Wheeler. He goes into considerable details about writing tests, defining <code>setUp()</code> and <code>tearDown()</code>, running asynchronous tests, using
and creating matchers, and configuring your test environment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using boolean expressions for assignment in Dart]]></title>
    <link href="http://shailen.github.com/blog/2012/11/17/using-boolean-expressions-for-assignment-in-dart/"/>
    <updated>2012-11-17T21:52:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/17/using-boolean-expressions-for-assignment-in-dart</id>
    <content type="html"><![CDATA[<p>I often use boolean evaluation in Javascript for assignment:</p>

<pre><code>var Point = function(options) {
  options = options || {};
  this.x = options['x'] || 0;
  this.y = options['y'] || 0;
}
</code></pre>

<p>And in Ruby, it is idiomatic to do something like this:</p>

<pre><code>age ||= 16; // if age is `nil` or `false`, assign it a value of 16
</code></pre>

<p>or, this:</p>

<pre><code>a, b, c = 1, 2, 3
d = a &amp;&amp; b &amp;&amp; c
// d gets the value of c, 3
</code></pre>

<p>In each case, the boolean expressions return the value of the last evaluation. Can I do something similar in Dart?
Is this code legal?</p>

<pre><code>var x; // x is null
var y = x || 10;
</code></pre>

<p>In checked mode, no; in unchecked mode, this works, but the result may surprise you.</p>

<p>Based on other languages I have used, I would expect <code>y</code> to equal <code>10</code>.
In Dart, this does not happen and <code>y</code> gets assigned a value of <code>false</code>. Why? Since <code>10</code> is not explicitly <code>true</code>, it evaluates to
<code>false</code>. All things that are not explicitly <code>true</code> in Dart, are false (see my <a href="http://shailen.github.com/blog/2012/11/16/booleans-in-dart/">post</a>
from yesterday if this isn&#8217;t clear).</p>

<p>Now, in checked mode (you are using checked mode, right?), <code>y</code> doesn&#8217;t get a value at all because we get an error:</p>

<pre><code>Unhandled exception:
type 'Null' is not a subtype of type 'bool' of 'boolean expression'.
</code></pre>

<p>This is Dart&#8217;s way of telling us that it is not going to do implicit boolean conversion for us when using <code>||</code> and it expects to see a boolean where it
now sees a <code>null</code> (<code>x</code> is null).  Changing the code to:</p>

<pre><code>var y = 5 || 10;
</code></pre>

<p>we get a slightly different error message:</p>

<pre><code>Unhandled exception:
type 'int' is not a subtype of type 'bool' of 'boolean expression'.
</code></pre>

<p>No good. Dart wants booleans around the <code>||</code>. This works fine, but it isn&#8217;t what we are looking for:</p>

<pre><code>int x = 10;
bool y = x % 3 == 1 || x % 5 == 2;
// y is true
</code></pre>

<p>So, is there a correct way to handle assignment based on boolean evaluation? Yes. Don&#8217;t rely on <code>||</code> or <code>&amp;&amp;</code> to implicitly
handle this for you; instead, explicitly check for truthyness yourself:</p>

<pre><code>int y = x == null ? 0 : x;
</code></pre>

<p>If <code>x</code> is null, <code>y</code> will be <code>0</code>; else, it will have the value of <code>x</code>. Quite clear and readable.</p>

<p>Boolean based assignment is common in JavaScript because there we don&#8217;t have as rich an understanding
of keyword arguments and default values as Dart has. In Dart, we can do this:</p>

<pre><code>myFunction({x: 0, y: 0}) {
  ...
}
</code></pre>

<p>If you need to check whether a parameter was passed a value or not, you can easily do so:</p>

<pre><code>myFunction([x=0]) {
  if (?x) {
    ...
  }
}
</code></pre>

<p>The lessons of all this? <strong>Use checked mode</strong>. Don&#8217;t rely on Dart&#8217;s boolean expressions to magically return boolean values; if such values
are needed, obtain them directly yourself. Be explicit. Use default arguemnts in functions and methods. Use <code>?</code> to check if a parameter was passed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[booleans in dart]]></title>
    <link href="http://shailen.github.com/blog/2012/11/16/booleans-in-dart/"/>
    <updated>2012-11-16T18:32:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/16/booleans-in-dart</id>
    <content type="html"><![CDATA[<p>We&#8217;ve all written code that looks something like this:</p>

<pre><code>if (x) {
  // do something
} else {
  // do something else
}
</code></pre>

<p>In Javascript, the <code>if (x)</code> would evaluate to false if <code>x</code> was <code>false</code>, <code>null</code>, <code>undefined</code>, the number <code>0</code> (or <code>0.0</code>),
an <code>''</code> or <code>NaN</code> (these are all falsey in Javascript); otherwise it would evaluate to true.</p>

<p>If this code were rewritten in Python, the <code>if (x)</code> would evaluate to false if <code>x</code> was <code>None</code>, <code>false</code>, zero (<code>0</code>,
<code>0.0</code>, <code>0L</code>, etc.), an empty string (<code>''</code>), list (<code>[]</code>), tuple (<code>()</code>) or dict(<code>{}</code>);
otherwise it would evaluate to true.</p>

<p>So, what are the truthy and falsey lists for Dart? To answer that, let&#8217;s look at what the
language spec says about booleans:</p>

<pre><code>Boolean conversion maps any object o into a boolean. Boolean conversion is defined  by the function
  (bool v){
    assert(v != null);
    return identical(v, true);
  }(o)
</code></pre>

<p>In other words, anything that is not explicitly <code>true</code>, is <code>false</code> in Dart. So, in our example, if <code>if (x)</code> would evaluate to
<code>true</code> if and only if <code>x</code> equalled the the boolean literal <code>true</code> (or an expression that evaluated to <code>true</code> (<code>3 % 2 == 1</code>, say)),;
otherwise it would evaluate to false.</p>

<p>This is very simple. There are no truthy/falsey lists to memorize; it is all very clear, quite correct and &#8230;.</p>

<p>likely to get you quickly into trouble. Wait, what?</p>

<p>This is legal Dart code, right? Well, that depends if you are in checked mode or not.  In unchecked mode, the code works exactly
as described above. However, in <em>checked mode</em>, any <code>if (x)</code> type constructs will generate an exception unless x is a boolean. Let&#8217;s
look at that function from the language spec again:</p>

<pre><code>(bool v) {

}
</code></pre>

<p><strong>In checked mode, v <em>must be a bool</em>. If it isn&#8217;t, the Dart editor will complain and throw an exception. We will never
get to the stage of figuring out whether our <code>if (x)</code> evaluates to true or false.</strong></p>

<p>Going back to other languages for a moment: I always felt that Javascript and Python had too many falsey values. I liked
that in Ruby, only <code>false</code> and <code>nil</code> evaluated to false; everything else was true. So, instead of writing <code>if myList ...</code>, you
would write <code>if myList.empty? ..</code> in Ruby, making your intent quite clear.
Dart actually goes beyond
Ruby in this regard and <em>really</em> simplifies things:  <code>false</code> (and boolean expressions that return <code>false</code>) are false;
<code>true</code> (and boolean expressions that return <code>true</code>) are true. <em><strong>Everything else is neither false nor true</strong></em>.</p>

<p>So, as a programmer, how should you handle the reality that the Dart&#8217;s boolean semantics change based on whether you
are in checked or unchecked mode?  My recommendation: always code in checked mode and be quite explicit about boolean
expressions.</p>

<p>Avoid code like this (you will get an exception in checked mode):</p>

<pre><code>String s = '';
if (s) {...}
</code></pre>

<p>This can be rewritten more clearly:</p>

<pre><code>if (s.isEmpty) {...}
</code></pre>

<p>The following:</p>

<pre><code>List myList = [1, 2, 3];
if(myList.indexOf(1)) {...}
</code></pre>

<p>should become:</p>

<pre><code>if (myList.indexOf(1) != 0) {...}
</code></pre>

<p>and this:</p>

<pre><code>int num;
if (num) {...}
</code></pre>

<p>is better written as:</p>

<pre><code>if (num == null) {...}
</code></pre>

<p>The real take home lesson is a) listen to the static warnings b) only use booleans for boolean operations (Do not rely on implicit boolean
conversions) c) checked mode is there to stop you immediately if you do bad things during development. Dart works pretty hard
to force you to do boolean stuff explicitly and there are good reasons for this. Follow the warnings from the editor and your
code will be clearer, more maintainable and you will avoid a huge class of bugs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[character codes and strings in Dart]]></title>
    <link href="http://shailen.github.com/blog/2012/11/15/character-codes-and-strings-in-dart/"/>
    <updated>2012-11-15T15:29:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/15/character-codes-and-strings-in-dart</id>
    <content type="html"><![CDATA[<p>In my Python programs, I found use for the <code>ord()</code> and <code>chr()</code> builtins to convert between string characters and their
ASCII representations. Similar tools exist in Dart. To get a list of character codes for a string, use <code>charCodes</code>:</p>

<pre><code>String s = "hello";
print(s.charCodes);
// [104, 101, 108, 108, 111]
</code></pre>

<p>To get a specific character code, you can either subscript <code>charCodes</code>:</p>

<pre><code>print(s.charCodes[0]); 
</code></pre>

<p>or - this is the more common way - use <code>charCodeAt</code>:</p>

<pre><code>print(s.charCodeAt(0));
</code></pre>

<p>To assemble a string from a list of character codes, use the <code>String</code> factory, <code>fromCharCodes</code>:</p>

<pre><code>List&lt;int&gt; charCodes = [104, 101, 108, 108, 111];
print(new String.fromCharCodes(charCodes));
// "hello"
</code></pre>

<p>If you are using a StringBuffer to build up a string, you can add individual charCodes using <code>addCharCode</code>
(use <code>add()</code> to add characters; use <code>addCharCode()</code> to add charCodes):</p>

<pre><code>StringBuffer sb = new StringBuffer();
charCodes.forEach((charCode) {
  sb.addCharCode(charCode);
});

print(sb.toString());
// "Hello" 
</code></pre>

<p>Here is an implementation of the <code>rot13</code> algorithm, using the tools described above. <code>rot13</code>
is a simple letter substitution algorithm that rotates a string by 13 places by replacing each
character in it by one that is 13 characters removed (&#8216;a&#8217; becomes &#8216;n&#8217;, &#8216;N&#8217; becomes &#8216;A&#8217;, etc.):</p>

<pre><code>String rot13(String s) {
  List&lt;int&gt; rotated = [];

  s.charCodes.forEach((charCode) {
    final int numLetters = 26;
    final int A = 65;
    final int a = 97;
    final int Z = A + numLetters;
    final int z = a + numLetters;

    if (charCode &lt; A ||
        charCode &gt; z ||
        charCode &gt; Z &amp;&amp; charCode &lt; a) {
      rotated.add(charCode);
    }
    else {
      if ([A, a].some((item){
        return item &lt;= charCode &amp;&amp; charCode &lt; item + 13;
      })) {
        rotated.add(charCode + 13);
      } else {
        rotated.add(charCode - 13);
      }   
    }
  });

  return (new String.fromCharCodes(rotated));
}
</code></pre>

<p>Running the code:</p>

<pre><code>var wordsList = [["Jung", "be", "purely", "barf"],
                  ["aha", "nun"]];
wordsList.forEach((word_list) {
  print(word_list.map((word) {
    return rot13(word);
  }));
});
// ["What", "or", "cheryl", "ones"]
// ["nun", "aha"] 
</code></pre>

<p>and:</p>

<pre><code>String str = "aMz###AmZ";
assert(rot13(rot13(str)) == str);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dart String Interpolation]]></title>
    <link href="http://shailen.github.com/blog/2012/11/14/dart-string-interpolation/"/>
    <updated>2012-11-14T11:23:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/14/dart-string-interpolation</id>
    <content type="html"><![CDATA[<p>You can access the value of an expression inside a string by using <code>${expression}</code>.</p>

<pre><code>var greeting = "Hello";
var person = "Rohan";

print("${greeting}, ${person}!"); // prints "Hello, Rohan!"
</code></pre>

<p>If the expression is an identifier, the <code>{}</code> can be skipped.</p>

<pre><code>print("$greeting, $person");
</code></pre>

<p>If the variable inside the <code>{}</code> isn&#8217;t a string, the variable&#8217;s <code>toString()</code> method is called:</p>

<pre><code>int x = 5;
print("There are ${x.toString()} people in this room");
</code></pre>

<p>The call to <code>toString()</code> is unnecessary (although harmless) in this case: <code>toString()</code> is already defined
for ints and Dart automatically calls <code>toString()</code>. What this does mean, though, is that it is the user&#8217;s
responsibility to define a <code>toString()</code> method when interpolating user-defined objects.</p>

<p>You can interpolate expressions of arbitrary complexity by placing them inside <code>${}</code>:</p>

<p>A ternary <code>if..else</code>:</p>

<pre><code>int x = 5;
print("There are ${x &lt; 10 ? "a few" : "many"} people in this room");
</code></pre>

<p>List and Map operations:</p>

<pre><code>List list = [1, 2, 3, 4, 5];
print("The list is $list, and when squared it is ${list.map((i) {return i * i;})}");
// The list is [1, 2, 3, 4, 5], and when squared it is [1, 4, 9, 16, 25]

Map map = {"ca": "California", "pa": "Pennsylvania"};
print("I live in sunny ${map['ca']}");
// I live in sunny California
</code></pre>

<p>Notice above that you can access <code>$list</code>(an identifier) without using <code>{}</code>, but the call to <code>list.map</code>(an expression)
needs to be inside <code>{}</code>. Similarly, in the example below, <code>$x</code> works, but <code>{}</code> are required for <code>-x</code>:</p>

<pre><code>print("x = $x and -x = ${-x}");
// x = 5 and -x = -5
</code></pre>

<p>Expressions inside <code>${}</code> can be arbitrarily complex:</p>

<pre><code>List names = ['John', 'Sophena', 'Henrietta'];
print("${
  ((names) {
      return names[(new math.Random()).nextInt(names.length)];
  })(names)} is the most valueable member of our team");
</code></pre>

<p>The code above defines an anonymous function to pick a random name from a list and then calls that function with
<code>names</code> as an argument. All of this is done as part of string interpolation.</p>

<p>Creating a function and immediately calling it is useful in a lot of situations (it is a common practice in Javascript); but, watch out:
doing this sort of thing can lead to hard to maintain code. An abudance of caution is advised ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[string concatenation in dart]]></title>
    <link href="http://shailen.github.com/blog/2012/11/13/string-concatenation-in-dart/"/>
    <updated>2012-11-13T17:33:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/13/string-concatenation-in-dart</id>
    <content type="html"><![CDATA[<p>Let us start with a simple helloworld.dart example and use it to see how string concatenation works in Dart.</p>

<pre><code>void main() {
  print("hello, world!");
}
</code></pre>

<p>The above works, obviously. Now, if we were given this greeting as two strings, &#8220;hello, &#8221; and &#8220;world!&#8221;, and asked
to join them together, we might be tempted to do:</p>

<pre><code>"hello, " + "world!"
</code></pre>

<p>This works in lots of languages, but not in Dart. The + operator has not been overloaded in the String class, the above code throws
a <code>NoSuchMethodError</code>.</p>

<p>Not a problem: Dart gives us lots of ways to contcatenate strings. I list the most common ways
below. <em>Above the examples you will see some <strong>crude</strong> benchmarks that I calculated by running each example a million
times on my MacBook. These can give a <strong>general</strong> sense of the relative efficiency of each method</em>.</p>

<p>The easiest, most efficient way to concat strings is by using adjacent string literals:</p>

<pre><code>.041 seconds
String a = "hello, " "world!";
</code></pre>

<p>This still works if the adjacent strings are on different lines:</p>

<pre><code>.040 seconds
String b = "hello, "
    'world!';
</code></pre>

<p>Dart also has a <code>StringBuffer</code> class, and this can be used to build up a <code>StringBuffer</code> object
and convert it to a string by calling <code>toString()</code> on it:</p>

<pre><code>.689 seconds
var sb = new StringBuffer();
["hello, ", "world!"].forEach((item) {
  sb.add(item);
  });
String c = sb.toString();
</code></pre>

<p>The <code>Strings</code> class (notice the plural) gives us 2 methods, <code>join()</code> and <code>concatAll()</code> that
can also be used. <code>Strings.join()</code> takes a delimiter as a second argument:</p>

<pre><code>.408 seconds
String d = Strings.join(["hello", "world!"], ", ");

.385 seconds
String e = Strings.concatAll(["hello", "world"]);
</code></pre>

<p>All of the above work, but if you are looking for a <code>+</code> substitute, use adjacent string literals;
if you need to join a list of strings using a delimiter,
use <code>Strings.join()</code>. If you plan on building a very long string, the
<code>StringBuffer</code> class can gather the components quite efficiently and convert them to a string only
when needed.</p>

<p>You can also use string interpolation; that will be the subject of my next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[why use Dart?]]></title>
    <link href="http://shailen.github.com/blog/2012/11/12/why-use-dart/"/>
    <updated>2012-11-12T14:19:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/12/why-use-dart</id>
    <content type="html"><![CDATA[<p>Building web applications is hard. Building <em><strong>large</strong></em> web applications is a real challenge. Given this, I am super
excited by the emergence of Dart as a structured web programming language for building applications for the modern web.</p>

<p>I am mostly a Ruby and Python hacker. I have spent the last few years doing web programming and this means that I
have spent a lot of time writing Javascript. I <em>really</em> like coding in Javascript: I like its (mostly) coherent OO/functional
hybrid syntax, I find it expressive and I like to make use of its rich and rapidly evolving ecosystem of frameworks and libraries.</p>

<p>Javascript started off as small language for animating mostly static web pages. As the
web has evolved, Javascript code-bases have become larger (my last project, a Rails 3 app using Backbone, had more Javascript than
Ruby code in it). Large codebases require careful use of code reuse and organization if they are to scale; through the use of &#8216;classes&#8217; and inheritance,
the module and sandbox design patterns, popular MVC frameworks like Backbone and Angular, Javascript developers have sought to bring
more structure to their code.</p>

<p>I very much view Dart as a logical next step in this quest for greater code organization. The Dart project is a serious - and long awaited -
attempt at creating an alternative to writing web applications using Javascript; it is likely to appeal to those who want to
retain the relative ease of current web development, but want a language with more structure than what is available to them today.
Building large web applications has been quite daunting - even heroic - and Dart aims to make the development process easier.
Dart is a &#8220;batteries included&#8221; project (the language comes with libraries, a package manager, an editor, and a VM) and
Dart code executes fast, making it an attractive option for modern web development.</p>

<p>Here are a few salient points about Dart:</p>

<ul>
<li>Dart is open source</li>
<li>it has a syntax that is likely to be familiar to most programmers</li>
<li>it is relatively easy to learn</li>
<li>it compiles to javascript that can be run in any modern browser</li>
<li>it can also be executed directly using a Chromium-based browser (nicknamed <a href="http://www.dartlang.org/dartium/">Dartium</a>) that includes the Dart virtual machine (VM)</li>
<li>it can coexist with javascript through the use of the <a href="http://www.dartlang.org/articles/js-dart-interop/">interop library</a></li>
<li>it runs in the client and the server</li>
<li>it comes with a lightweight <a href="http://www.dartlang.org/docs/editor/">editor</a> that you can use to write and debug applications</li>
<li>Dart programs run <em>fast</em> (many of the people who created Chrome&#8217;s V8 are leading the Dart project)</li>
<li>it offers concurrency through the use of <a href="http://www.dartlang.org/docs/dart-up-and-running/ch03.html#ch03-dartisolate---concurrency-with-isolates">isolates</a></li>
<li>Dart has <strong>optional</strong> static type anotations that can help you organize your code, provide better debug messages in the editor and act as documentation</li>
<li>it comes with batteries included: an <a href="http://www.dartlang.org/docs/dart-up-and-running/ch03.html#ch03-dart-html-using-html5-apis">HTML library</a>
for DOM manipulation, an <a href="http://www.dartlang.org/docs/dart-up-and-running/ch03.html#ch03-dartio---file-and-socket-io-for-command-line-apps">IO library</a>
and a <a href="http://api.dartlang.org/docs/bleeding_edge/unittest.html">unittest library</a></li>
<li>it encourages modular code organization through the use of libraries</li>
<li>it has a package manager (<a href="http://pub.dartlang.org/">pub</a>) so you can integrate code from across the Dart ecosystem</li>
</ul>


<p>Is Dart going to change how we write web applications? While its still early - the language just had its M1 (Milestone 1)
release and is still not at the 1.0 stage - what I see so far is super encouraging.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[starting to blog with octopress]]></title>
    <link href="http://shailen.github.com/blog/2012/11/12/starting-to-blog-with-octopress/"/>
    <updated>2012-11-12T10:27:00-08:00</updated>
    <id>http://shailen.github.com/blog/2012/11/12/starting-to-blog-with-octopress</id>
    <content type="html"><![CDATA[<p>I recently started working at Google. I expect to be writing in this space about Dart, HTML5,
Web Components and whatever else I encounter that might be interesting to anyone else.</p>

<p>This blog is created using Octopress, a framework designed for Jekyll, the static blogging engine
that powers Github Pages. Using Octopress, I can use Markdown, embed code from my filesystem, download and embed gists,
embed code from jsFiddle, and publish easily via a git push.</p>
]]></content>
  </entry>
  
</feed>
